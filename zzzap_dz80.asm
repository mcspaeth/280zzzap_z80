				;; IORd
				;; 00						= Start / Coin / Shift / Pedal
				;; 01						= Steering
				;; 02						= DIPs
				;;
				
				;; Memory
				;; 2009-2012		= PRNG?
				;; 2020					= IN0 store for IRQ
				;; 2021					= Coin flag?
				;; 2022					= Game state (D7 set = do big gfx?)
				;; 2023					= ??
				;; 2025-2026		= ??
				;; 2027-2028		= Pointer to 5-byte tables?
				;; 2029-202A		= Previous score
				;; 202B-202C		= High score
				;; 202D					= Write value for when 202E hits $00
				;; 202E					= Timer for audio port 2
				;; 202F					= Coins
				;; 2035					= ?? (Incremented on crash)
				;; 2036					= ??
				;; 2037					= ??
				;; 2039					= ?? (Copied to $204A)
				;; 203D-203E		= Player score
				;; 203F					= Countdown timer
				;; 2040					= Countdown timer
				;; 2041					= Countdown timer
				;; 2042					= Game time
				;; 2044					= Bonus time
				;; 2045					= IN0 store
				;; 2046					= IN1 store
				;; 204A					= ?? (Coped from $2039, tested at $100f)
				;; 204B					= Down counter?
				;; 204D-204E		= Pointer?
				;; 2054					= ??
				;; 2055					= Big gfx shift
				;; 2056-2057		= Big gfx loc offset
				;; 2058-2059		= Big gfx loc store
				;; 205B-2062		= 8-byte table (Table of messages?)
				;; 2143					= Counts $03, $02, $01, $00, (action on reset)

				;; rst $00
				;; Reset vector
0000: 00        nop
0001: 00        nop
0002: af        xor  a
0003: d3 05     out  ($05),a		; Audio Port 2
0005: c3 64 00  jp   $0064

				;; rst $08
				;; Interrupt vector
0008: f5        push af
0009: c5        push bc
000a: d5        push de
000b: 0e 00     ld   c,$00			; Interrupt type
000d: c3 9e 06  jp   $069E

				;; rst $10
				;; Interrupt vector
0010: f5        push af
0011: c5        push bc
0012: d5        push de
0013: 0e 01     ld   c,$01			; Interrupt type
0015: c3 9e 06  jp   $069E

				;; rst $18
				;; Stack regs 
0018: e3        ex   (sp),hl
0019: d5        push de
001a: c5        push bc
001b: f5        push af
001c: e9        jp   (hl)				; Return to calling address

				;; "4" byte table for $0bed
				;; Extended time (0x03 = None)
001d: 25 30 20

				;; rst $20
				;; Unstack regs and rts
0020: e1        pop  hl					; (Calling adddress thrown away)
0021: f1        pop  af
0022: c1        pop  bc
0023: d1        pop  de
0024: e1        pop  hl
0025: c9        ret
				
				;; Garbage
0026: 35        dec  (hl)				; DATA
0027: 00        nop							; DATA

				;; rst $28
0028: c3 16 0f  jp   $0F16

				;; Garbage
002b: 05        dec  b					; DATA
002c: b4        or   h					; DATA
002d: 04        inc  b					; DATA
002e: 14        inc  d					; DATA
002f: 04        inc  b					; DATA
				
				;; rst $30
0030: e3        ex   (sp),hl
0031: 7e        ld   a,(hl)			; Grab argument from call
0032: 23        inc  hl
0033: e3        ex   (sp),hl		; Restore stack pointer
				
0034: cd 91 0f  call $0F91			; ret if a == spot in table
0037: 77        ld   (hl),a			; store a in table
0038: df        rst  $18				; Stack regs
0039: 21 5e 20  ld   hl,$205E
003c: 7e        ld   a,(hl)			; $205F
003d: 23        inc  hl
003e: b6        or   (hl)
003f: e6 1f     and  $1F				; Either string set?
0041: ca 5d 00  jp   z,$005D		; Low 5 bits of $205E,205F clear
				
0044: 01 ff 1d  ld   bc,$1DFF
0047: cd 62 01  call $0162			; Write c to $4000 b*32 times
				
004a: 21 5e 20  ld   hl,$205E
004d: 7e        ld   a,(hl)
004e: cd 5e 0f  call $0F5E			; String @ loc from a
0051: 23        inc  hl					; $205F
0052: 7e        ld   a,(hl)
0053: cd 5e 0f  call $0F5E			; String @ loc from a
0056: e7        rst  $20				; Unstack regs (and return)
				
				;; White out bottom 40 rows
0057: 01 ff 1d  ld   bc,$1DFF
005a: c3 62 01  jp   $0162			; Write c to $4000 b*32 times
				;; And return

				
				;; Black out bottom 40 lines of screen
005d: 01 00 1d  ld   bc,$1D00
0060: cd 62 01  call $0162			; Write c to $4000 b*32 times
				
0063: e7        rst  $20				; Unstack regs (and return)

			
				;; Code start
0064: db 02     in   a,($02)		; IN2
0066: e6 0c     and  $0C				; Mask game time
0068: fe 04     cp   $04
006a: c2 61 0b  jp   nz,$0B61		; Not test mode

				;; Test mode
006d: 06 01     ld   b,$01			; Initial bit to test
006f: 11 00 00  ld   de,$0000		; Odd/even errors
0072: 21 00 20  ld   hl,$2000
0075: d3 07     out  ($07),a		; Watchdog

				;; Bitwise RAM test
0077: 70        ld   (hl),b			; Write
0078: 7e        ld   a,(hl)			; Read
0079: a8        xor  b					; Compare
007a: ca 8c 00  jp   z,$008C		; OK

				;; RAM Error
007d: 4f        ld   c,a
007e: 7d        ld   a,l
007f: e6 01     and  $01
0081: 79        ld   a,c
0082: c2 8a 00  jp   nz,$008A		; Odd address

				;; Even RAM error
0085: b2        or   d
0086: 57        ld   d,a				; Set even errot bits?
0087: c3 8c 00  jp   $008C

				;; Odd RAM error
008a: b3        or   e
008b: 5f        ld   e,a				; Set odd error bits?
				
008c: 23        inc  hl
008d: 7c        ld   a,h
008e: fe 40     cp   $40				; End of RAM?
0090: c2 75 00  jp   nz,$0075		; Loop
				
0093: d3 07     out  ($07),a		; Watchdog

0095: 2b        dec  hl					; 
0096: 7c        ld   a,h
0097: fe 1f     cp   $1F
0099: ca c9 00  jp   z,$00C9		; Done

009c: 7e        ld   a,(hl)
009d: a8        xor  b
009e: ca b0 00  jp   z,$00B0		; OK
				
00a1: 4f        ld   c,a
00a2: 7d        ld   a,l
00a3: e6 01     and  $01
00a5: 79        ld   a,c
00a6: c2 ae 00  jp   nz,$00AE		; Odd address

				;; Even RAM error
00a9: b2        or   d
00aa: 57        ld   d,a				; Set even error bits
00ab: c3 b0 00  jp   $00B0

				;; Odd RAM error
00ae: b3        or   e
00af: 5f        ld   e,a				; Set odd error bits
				
00b0: 78        ld   a,b
00b1: 2f        cpl
00b2: 77        ld   (hl),a			; Write
00b3: ae        xor  (hl)				; Read/write
00b4: ca 93 00  jp   z,$0093		; OK = Loop
				
00b7: 4f        ld   c,a
00b8: 7d        ld   a,l
00b9: e6 01     and  $01
00bb: 79        ld   a,c
00bc: c2 c4 00  jp   nz,$00C4		; Odd address

				;; Even RAM error
00bf: b2        or   d
00c0: 57        ld   d,a				; Set even error bits
00c1: c3 c6 00  jp   $00C6

				;; Odd RAM error
00c4: b3        or   e
00c5: 5f        ld   e,a				; Set odd error bits
00c6: c3 93 00  jp   $0093			; Loop

				;; RAM test continues
00c9: d3 07     out  ($07),a		; Watchdog
				
00cb: 23        inc  hl
00cc: 7c        ld   a,h
00cd: fe 40     cp   $40
00cf: ca ec 00  jp   z,$00EC		; Done
				
00d2: 78        ld   a,b
00d3: 2f        cpl
00d4: ae        xor  (hl)
00d5: ca e7 00  jp   z,$00E7		; OK
				
00d8: 4f        ld   c,a
00d9: 7d        ld   a,l
00da: e6 01     and  $01
00dc: 79        ld   a,c
00dd: c2 e5 00  jp   nz,$00E5		; Odd address
00e0: b2        or   d
00e1: 57        ld   d,a				; Set even error bits
00e2: c3 e7 00  jp   $00E7
				
00e5: b3        or   e
00e6: 5f        ld   e,a				; Set odd error bits
				
00e7: af        xor  a
00e8: 77        ld   (hl),a			; Clear RAM
00e9: c3 c9 00  jp   $00C9			; Loop

				;; RAM test bit loop complete
00ec: 78        ld   a,b
00ed: 07        rlca
00ee: 47        ld   b,a
00ef: d2 72 00  jp   nc,$0072		; Loop for other bits
				
00f2: 7a        ld   a,d
00f3: b3        or   e
00f4: ca 1b 01  jp   z,$011B		; RAM check OK
				
00f7: eb        ex   de,hl
00f8: f9        ld   sp,hl			; Stash de in sp
				
00f9: 11 00 20  ld   de,$2000
00fc: 06 00     ld   b,$00
00fe: 21 00 00  ld   hl,$0000
0101: 39        add  hl,sp			; hl = sp
0102: 0e 10     ld   c,$10
0104: af        xor  a
0105: 29        add  hl,hl			; hl = 2*sp
0106: da 0a 01  jp   c,$010A
0109: 2f        cpl							;	a=$FF
010a: 12        ld   (de),a			; de=$2000
010b: 13        inc  de					; de=$2001
010c: 3e 18     ld   a,$18
010e: 12        ld   (de),a
010f: 13        inc  de
0110: 0d        dec  c
0111: c2 04 01  jp   nz,$0104		; Loop
0114: 05        dec  b
0115: c2 fe 00  jp   nz,$00FE		; Loop
				
0118: c3 54 01  jp   $0154			; ERROR
				
011b: 31 00 24  ld   sp,$2400
011e: 21 0c 28  ld   hl,$280C
0121: e5        push hl

				;; ROM Checksum
0122: 21 00 00  ld   hl,$0000						; Start address
0125: 11 59 01  ld   de,$0159						;	Code?
0128: 01 00 04  ld   bc,$0400						; Count 
012b: af        xor  a									; A=0 
012c: 86        add  a,(hl)
012d: d3 07     out  ($07),a						; Watchdog
012f: 23        inc  hl
0130: 0d        dec  c
0131: c2 2c 01  jp   nz,$012C						; Loop for $100
0134: 05        dec  b
0135: c2 2c 01  jp   nz,$012C						; Loop for $400 bloack 
0138: a7        and  a									; Should be zero! 
0139: ca 46 01  jp   z,$0146
				
013c: 1a        ld   a,(de)							; Bad ROM code 
013d: e3        ex   (sp),hl						; hl to top of stack
013e: eb        ex   de,hl							; de = old stack top
013f: c5        push bc
0140: cd 81 03  call $0381							; Draw char from A 
				
0143: c1        pop  bc
0144: eb        ex   de,hl							; hl = old stack top
0145: e3        ex   (sp),hl						; Swap back
0146: 13        inc  de									; Next code 
0147: 7c        ld   a,h
0148: fe 18     cp   $18								; End of ROMs
014a: c2 28 01  jp   nz,$0128						; Loop
				
014d: e1        pop  hl									; Should still be $280C
014e: 7d        ld   a,l
014f: fe 0c     cp   $0C				
0151: ca 00 00  jp   z,$0000						; Reset
				
				;; Stop on RAM/ROM Error
0154: d3 07     out  ($07),a						; Watchdog
0156: c3 54 01  jp   $0154							; Spin forever	 

				;; Bad ROM codes
0159: 48 47 46 45 44 43					; DATA HGFEDC

				;; Clear screen
015f: 01 00 e0  ld   bc,$E000

				;; bc passed in?
				;; b -> a for loop count
				;; c -> b for value to write
0162: 11 00 40  ld   de,$4000		; Address
				;; de = adddress passed in
0165: 21 00 00  ld   hl,$0000
0168: 39        add  hl,sp			; hl = sp
0169: eb        ex   de,hl			; hl = $4000, de = original sp
016a: f3        di							; Disable interrtups (since stack gets trashed)
016b: f9        ld   sp,hl			; hl = sp, sp = $4000
016c: eb        ex   de,hl			; de = sp, hl = original sp
016d: 78        ld   a,b				; a = b (Loop count)
016e: 41        ld   b,c				; c = b (value to write)
				
				;; Push bc 16*a times
016f: c5        push bc					; 0
0170: c5        push bc					; 1
0171: c5        push bc					; 2
0172: c5        push bc					; 3
0173: c5        push bc					; 4
0174: c5        push bc					; 5
0175: c5        push bc					; 6
0176: c5        push bc					; 7
0177: c5        push bc					; 8
0178: c5        push bc					; 9
0179: c5        push bc					; a
017a: c5        push bc					; b
017b: c5        push bc					; c
017c: c5        push bc					; d
017d: c5        push bc					; e
017e: c5        push bc					; f
017f: 3d        dec  a
0180: c2 6f 01  jp   nz,$016F		; Loop
0183: f9        ld   sp,hl			; Restore SP
0184: fb        ei							; Enable interrupts
0185: c9        ret

				
0186: 3c			; ____########____
0187: 7e			; __############__
0188: 66			; __####____####__
0189: 66			; __####____####__
018a: 66			; __####____####__
018b: 66			; __####____####__
018c: 66			; __####____####__
018d: 66			; __####____####__
018e: 7e			; __############__
018f: 3c			; ____########____

0190: 18			; ______####______
0191: 1c			; ______######____
0192: 18			; ______####______
0193: 18			; ______####______
0194: 18			; ______####______
0195: 18			; ______####______
0196: 18			; ______####______
0197: 18			; ______####______
0198: 3c			; ____########____
0199: 3c			; ____########____
				
019a: 3c			; ____########____
019b: 7e			; __############__
019c: 66			; __####____####__
019d: 60			; __####__________
019e: 7c			; __##########____
019f: 3e			; ____##########__
01a0: 06			; __________####__
01a1: 06			; __________####__
01a2: 7e			; __############__
01a3: 7e			; __############__
				
01a4: 3c			; ____########____
01a5: 7e			; __############__
01a6: 66			; __####____####__
01a7: 60			; __####__________
01a8: 38			; ____######______
01a9: 78			; __########______
01aa: 60			; __####__________
01ab: 66			; __####____####__
01ac: 7e			; __############__
01ad: 3c			; ____########____
				
01ae: 66			; __####____####__
01af: 66			; __####____####__
01b0: 66			; __####____####__
01b1: 66			; __####____####__
01b2: 7e			; __############__
01b3: 7e			; __############__
01b4: 60			; __####__________
01b5: 60			; __####__________
01b6: 60			; __####__________
01b7: 60			; __####__________
				
01b8: 3e			; ____##########__
01b9: 3e			; ____##########__
01ba: 06			; __________####__
01bb: 06			; __________####__
01bc: 3e			; ____##########__
01bd: 7e			; __############__
01be: 60			; __####__________
01bf: 66			; __####____####__
01c0: 7e			; __############__
01c1: 3c			; ____########____
				
01c2: 3c			; ____########____
01c3: 3e			; ____##########__
01c4: 06			; __________####__
01c5: 06			; __________####__
01c6: 3e			; ____##########__
01c7: 7e			; __############__
01c8: 66			; __####____####__
01c9: 66			; __####____####__
01ca: 7e			; __############__
01cb: 3c			; ____########____
				
01cc: 7e			; __############__
01cd: 7e			; __############__
01ce: 60			; __####__________
01cf: 70			; __######________
01d0: 30			; ____####________
01d1: 38			; ____######______
01d2: 18			; ______####______
01d3: 1c			; ______######____
01d4: 0c			; ________####____
01d5: 0c			; ________####____
				
01d6: 3c			; ____########____
01d7: 7e			; __############__
01d8: 66			; __####____####__
01d9: 66			; __####____####__
01da: 3c			; ____########____
01db: 7e			; __############__
01dc: 66			; __####____####__
01dd: 66			; __####____####__
01de: 7e			; __############__
01df: 3c			; ____########____
				
01e0: 3c			; ____########____
01e1: 7e			; __############__
01e2: 66			; __####____####__
01e3: 66			; __####____####__
01e4: 7e			; __############__
01e5: 7c			; __##########____
01e6: 60			; __####__________
01e7: 60			; __####__________
01e8: 7c			; __##########____
01e9: 3c			; ____########____
				
01ea: 00			; ________________
01eb: 18			; ______####______
01ec: 18			; ______####______
01ed: 00			; ________________
01ee: 00			; ________________
01ef: 00			; ________________
01f0: 00			; ________________
01f1: 18			; ______####______
01f2: 18			; ______####______
01f3: 00			; ________________
				
01f4: ff			; ################
01f5: ff			; ################
01f6: ff			; ################
01f7: ff			; ################
01f8: ff			; ################
01f9: ff			; ################
01fa: 77			; __######__######
01fb: 77			; __######__######
01fc: ff			; ################
01fd: ff			; ################
				
01fe: 7f			; __##############
01ff: 7f			; __##############
0200: 7f			; __##############
0201: 7f			; __##############
0202: 7f			; __##############
0203: ff			; ################
0204: 77			; __######__######
0205: 77			; __######__######
0206: ff			; ################
0207: ff			; ################
				
0208: 1f			; ______##########
0209: 7f			; __##############
020a: 1f			; ______##########
020b: df			; ####__##########
020c: 1f			; ______##########
020d: ff			; ################
020e: 77			; __######__######
020f: 77			; __######__######
0210: ff			; ################
0211: ff			; ################
				
0212: 00			; ________________
0213: 00			; ________________
0214: 00			; ________________
0215: 00			; ________________
0216: 00			; ________________
0217: 00			; ________________
0218: 00			; ________________
0219: 00			; ________________
021a: 18			; ______####______
021b: 18			; ______####______
				
021c: 18			; ______####______
021d: 18			; ______####______
021e: 18			; ______####______
021f: 18			; ______####______
0220: 18			; ______####______
0221: 18			; ______####______
0222: 00			; ________________
0223: 00			; ________________
0224: 18			; ______####______
0225: 18			; ______####______
				
0226: 00			; ________________
0227: 00			; ________________
0228: 00			; ________________
0229: 00			; ________________
022a: 00			; ________________
022b: 00			; ________________
022c: 00			; ________________
022d: 00			; ________________
022e: 00			; ________________
022f: 00			; ________________
				
0230: 18			; ______####______
0231: 3c			; ____########____
0232: 7e			; __############__
0233: 66			; __####____####__
0234: 66			; __####____####__
0235: 66			; __####____####__
0236: 7e			; __############__
0237: 7e			; __############__
0238: 66			; __####____####__
0239: 66			; __####____####__
				
023a: 3e			; ____##########__
023b: 7e			; __############__
023c: 66			; __####____####__
023d: 66			; __####____####__
023e: 3e			; ____##########__
023f: 7e			; __############__
0240: 66			; __####____####__
0241: 66			; __####____####__
0242: 7e			; __############__
0243: 3e			; ____##########__
				
0244: 3c			; ____########____
0245: 7e			; __############__
0246: 66			; __####____####__
0247: 06			; __________####__
0248: 06			; __________####__
0249: 06			; __________####__
024a: 06			; __________####__
024b: 66			; __####____####__
024c: 7e			; __############__
024d: 3c			; ____########____
				
024e: 3e			; ____##########__
024f: 7e			; __############__
0250: 66			; __####____####__
0251: 66			; __####____####__
0252: 66			; __####____####__
0253: 66			; __####____####__
0254: 66			; __####____####__
0255: 66			; __####____####__
0256: 7e			; __############__
0257: 3e			; ____##########__
				
0258: 7e			; __############__
0259: 7e			; __############__
025a: 06			; __________####__
025b: 06			; __________####__
025c: 3e			; ____##########__
025d: 3e			; ____##########__
025e: 06			; __________####__
025f: 06			; __________####__
0260: 7e			; __############__
0261: 7e			; __############__
				
0262: 7e			; __############__
0263: 7e			; __############__
0264: 06			; __________####__
0265: 06			; __________####__
0266: 3e			; ____##########__
0267: 3e			; ____##########__
0268: 06			; __________####__
0269: 06			; __________####__
026a: 06			; __________####__
026b: 06			; __________####__
				
026c: 3c			; ____########____
026d: 7e			; __############__
026e: 66			; __####____####__
026f: 06			; __________####__
0270: 06			; __________####__
0271: 76			; __######__####__
0272: 76			; __######__####__
0273: 66			; __####____####__
0274: 7e			; __############__
0275: 3c			; ____########____
				
0276: 66			; __####____####__
0277: 66			; __####____####__
0278: 66			; __####____####__
0279: 66			; __####____####__
027a: 7e			; __############__
027b: 7e			; __############__
027c: 66			; __####____####__
027d: 66			; __####____####__
027e: 66			; __####____####__
027f: 66			; __####____####__
				
0280: 3c			; ____########____
0281: 3c			; ____########____
0282: 18			; ______####______
0283: 18			; ______####______
0284: 18			; ______####______
0285: 18			; ______####______
0286: 18			; ______####______
0287: 18			; ______####______
0288: 3c			; ____########____
0289: 3c			; ____########____
				
028a: 60			; __####__________
028b: 60			; __####__________
028c: 60			; __####__________
028d: 60			; __####__________
028e: 60			; __####__________
028f: 60			; __####__________
0290: 60			; __####__________
0291: 66			; __####____####__
0292: 7e			; __############__
0293: 3c			; ____########____
				
0294: 66			; __####____####__
0295: 66			; __####____####__
0296: 76			; __######__####__
0297: 3e			; ____##########__
0298: 1e			; ______########__
0299: 1e			; ______########__
029a: 3e			; ____##########__
029b: 76			; __######__####__
029c: 66			; __####____####__
029d: 66			; __####____####__
				
029e: 06			; __________####__
029f: 06			; __________####__
02a0: 06			; __________####__
02a1: 06			; __________####__
02a2: 06			; __________####__
02a3: 06			; __________####__
02a4: 06			; __________####__
02a5: 06			; __________####__
02a6: 7e			; __############__
02a7: 7e			; __############__
				
02a8: c3			; ####________####
02a9: c3			; ####________####
02aa: e7			; ######____######
02ab: e7			; ######____######
02ac: ff			; ################
02ad: ff			; ################
02ae: db			; ####__####__####
02af: c3			; ####________####
02b0: c3			; ####________####
02b1: c3			; ####________####
				
02b2: 66			; __####____####__
02b3: 66			; __####____####__
02b4: 6e			; __####__######__
02b5: 6e			; __####__######__
02b6: 7e			; __############__
02b7: 7e			; __############__
02b8: 76			; __######__####__
02b9: 76			; __######__####__
02ba: 66			; __####____####__
02bb: 66			; __####____####__
				
02bc: 3c			; ____########____
02bd: 7e			; __############__
02be: 66			; __####____####__
02bf: 66			; __####____####__
02c0: 66			; __####____####__
02c1: 66			; __####____####__
02c2: 66			; __####____####__
02c3: 66			; __####____####__
02c4: 7e			; __############__
02c5: 3c			; ____########____
				
02c6: 3e			; ____##########__
02c7: 7e			; __############__
02c8: 66			; __####____####__
02c9: 66			; __####____####__
02ca: 7e			; __############__
02cb: 3e			; ____##########__
02cc: 06			; __________####__
02cd: 06			; __________####__
02ce: 06			; __________####__
02cf: 06			; __________####__
				
02d0: 3c			; ____########____
02d1: 7e			; __############__
02d2: 66			; __####____####__
02d3: 66			; __####____####__
02d4: 66			; __####____####__
02d5: 66			; __####____####__
02d6: 66			; __####____####__
02d7: 66			; __####____####__
02d8: 7e			; __############__
02d9: 5c			; __##__######____
				
02da: 3e			; ____##########__
02db: 7e			; __############__
02dc: 66			; __####____####__
02dd: 66			; __####____####__
02de: 7e			; __############__
02df: 3e			; ____##########__
02e0: 76			; __######__####__
02e1: 66			; __####____####__
02e2: 66			; __####____####__
02e3: 66			; __####____####__
				
02e4: 3c			; ____########____
02e5: 7e			; __############__
02e6: 66			; __####____####__
02e7: 06			; __________####__
02e8: 3e			; ____##########__
02e9: 7c			; __##########____
02ea: 60			; __####__________
02eb: 66			; __####____####__
02ec: 7e			; __############__
02ed: 3c			; ____########____
				
02ee: 7e			; __############__
02ef: 7e			; __############__
02f0: 18			; ______####______
02f1: 18			; ______####______
02f2: 18			; ______####______
02f3: 18			; ______####______
02f4: 18			; ______####______
02f5: 18			; ______####______
02f6: 18			; ______####______
02f7: 18			; ______####______
				
02f8: 66			; __####____####__
02f9: 66			; __####____####__
02fa: 66			; __####____####__
02fb: 66			; __####____####__
02fc: 66			; __####____####__
02fd: 66			; __####____####__
02fe: 66			; __####____####__
02ff: 66			; __####____####__
0300: 7e			; __############__
0301: 3c			; ____########____
				
0302: 66			; __####____####__
0303: 66			; __####____####__
0304: 66			; __####____####__
0305: 66			; __####____####__
0306: 66			; __####____####__
0307: 7e			; __############__
0308: 3c			; ____########____
0309: 3c			; ____########____
030a: 18			; ______####______
030b: 18			; ______####______
				
030c: c3			; ####________####
030d: c3			; ####________####
030e: c3			; ####________####
030f: db			; ####__####__####
0310: ff			; ################
0311: ff			; ################
0312: e7			; ######____######
0313: e7			; ######____######
0314: c3			; ####________####
0315: c3			; ####________####
				
0316: 66			; __####____####__
0317: 66			; __####____####__
0318: 7e			; __############__
0319: 3c			; ____########____
031a: 18			; ______####______
031b: 18			; ______####______
031c: 3c			; ____########____
031d: 7e			; __############__
031e: 66			; __####____####__
031f: 66			; __####____####__
				
0320: 66			; __####____####__
0321: 66			; __####____####__
0322: 7e			; __############__
0323: 3c			; ____########____
0324: 18			; ______####______
0325: 18			; ______####______
0326: 18			; ______####______
0327: 18			; ______####______
0328: 18			; ______####______
0329: 18			; ______####______
				
032a: 7e			; __############__
032b: 7e			; __############__
032c: 60			; __####__________
032d: 70			; __######________
032e: 38			; ____######______
032f: 1c			; ______######____
0330: 0e			; ________######__
0331: 06			; __________####__
0332: 7e			; __############__
0333: 7e			; __############__
				
0334: 11			; ______##______##
0335: 55			; __##__##__##__##
0336: 55			; __##__##__##__##
0337: 55			; __##__##__##__##
0338: 11			; ______##______##
0339: ff			; ################
033a: 77			; __######__######
033b: 77			; __######__######
033c: f7			; ########__######
033d: f7			; ########__######
				
033e: 11			; ______##______##
033f: 57			; __##__##__######
0340: 51			; __##__##______##
0341: 5d			; __##__######__##
0342: 11			; ______##______##
0343: ff			; ################
0344: 77			; __######__######
0345: 77			; __######__######
0346: f7			; ########__######
0347: f7			; ########__######
				
0348: 15			; ______##__##__##
0349: 55			; __##__##__##__##
034a: 51			; __##__##______##
034b: 57			; __##__##__######
034c: 17			; ______##__######
034d: ff			; ################
034e: 77			; __######__######
034f: 77			; __######__######
0350: f7			; ########__######
0351: f7			; ########__######
				
0352: 11			; ______##______##
0353: 5d			; __##__######__##
0354: 51			; __##__##______##
0355: 55			; __##__##__##__##
0356: 11			; ______##______##
0357: ff			; ################
0358: 77			; __######__######
0359: 77			; __######__######
035a: f7			; ########__######
035b: f7			; ########__######
				
035c: 11			; ______##______##
035d: 55			; __##__##__##__##
035e: 51			; __##__##______##
035f: 55			; __##__##__##__##
0360: 11			; ______##______##
0361: ff			; ################
0362: 77			; __######__######
0363: 77			; __######__######
0364: f7			; ########__######
0365: f7			; ########__######

				;; Draw BCD w/ leading space
0366: 7e        ld   a,(hl)
0367: e6 f0     and  $F0								; Mask high hybble 
0369: c2 75 03  jp   nz,$0375						; Jump if non-zero 
036c: 3e 40     ld   a,$40
036e: cd 81 03  call $0381							; Draw char from A 
0371: c3 7c 03  jp   $037C

				;; Draw BCD w/ leading zero
0374: 7e        ld   a,(hl)
0375: 07        rlca
0376: 07        rlca
0377: 07        rlca
0378: 07        rlca
0379: cd 7d 03  call $037D							; Draw high nybble 

				;; Draw single BCD digit form hl
037c: 7e        ld   a,(hl)

				;; Draw single BCD digit from a
037d: e6 0f     and  $0F								; Mask low nybble 
037f: c6 30     add  a,$30							; BCD to char code 

				;; Draw char from a
0381: e6 7f     and  $7F								; Clear high bit 
0383: fe 30     cp   $30
0385: 06 00     ld   b,$00
0387: d2 8f 03  jp   nc,$038F						; a>=$30

				;; a<$30 = # of spaces
038a: 4f        ld   c,a
038b: eb        ex   de,hl							; de=de+a 
038c: 09        add  hl,bc
038d: eb        ex   de,hl
038e: c9        ret

				;; Draw char from a at de
038f: e5        push hl
0390: d5        push de					; Screen loc 
0391: cd b2 03  call $03B2			; Get table entry for char in a 
0394: 7c        ld   a,h				; hl = screen loc on return
0395: fe 3b     cp   $3B
0397: 3e 00     ld   a,$00
0399: da 9d 03  jp   c,$039D		; Not bottom area of screen
				
039c: 2f        cpl
039d: 4f        ld   c,a				; a=$00 or $FF
039e: c5        push bc
039f: 1a        ld   a,(de)			; Data from table
03a0: 13        inc  de
03a1: a9        xor  c					; Invert for bottom area
03a2: 77        ld   (hl),a
03a3: 01 20 00  ld   bc,$0020		; Row increment
03a6: 09        add  hl,bc
03a7: c1        pop  bc
03a8: 05        dec  b
03a9: c2 9e 03  jp   nz,$039E		; Loop for char
03ac: d1        pop  de
03ad: 13        inc  de
03ae: e1        pop  hl
03af: c9        ret

				
				;; Get char table entry for char 'a'
03b0: 06 00     ld   b,$00
03b2: d6 30     sub  $30
03b4: 4f        ld   c,a				; 
03b5: 60        ld   h,b				; bc = a  
03b6: 69        ld   l,c				; hl = a
03b7: 29        add  hl,hl			; hl = 2*a
03b8: 29        add  hl,hl			; hl = 4*a
03b9: 29        add  hl,hl			; hl = 8*a
03ba: 09        add  hl,bc			; hl = 9*a
03bb: 09        add  hl,bc			; hl = 10*a
03bc: 01 86 01  ld   bc,$0186		; Start of char table
03bf: 09        add  hl,bc			; hl = $0186 + 10*a
03c0: 06 0a     ld   b,$0A			; Byte count
03c2: eb        ex   de,hl			; de = $0186 + 10*a
03c3: c9        ret

				;; Draw crash message
03c4: cd 88 10  call $1088			; Kick PRNG, get #
03c7: e6 1c     and  $1C				; Mask by 0x07 << 3
03c9: 4f        ld   c,a
03ca: 06 00     ld   b,$00
03cc: 21 a5 0f  ld   hl,$0FA5		; Crash string table
03cf: 09        add  hl,bc

				;; Draw 4 char string BIG
03d0: 11 00 28  ld   de,$2800		; Screen loc?
03d3: 06 04     ld   b,$04			; 4 Chars?
03d5: cd e2 03  call $03E2
03d8: 7b        ld   a,e
03d9: c6 08     add  a,$08
03db: 5f        ld   e,a
03dc: 23        inc  hl
03dd: 05        dec  b
03de: c2 d5 03  jp   nz,$03D5		; Loop
03e1: c9        ret
				
03e2: 7e        ld   a,(hl)			; Get char
03e3: df        rst  $18				; Stack regs
03e4: cd b0 03  call $03B0			; Get table entry for char to de
03e7: e5        push hl
03e8: 1a        ld   a,(de)			; Get byte for char
03e9: 13        inc  de
03ea: 1f        rra
03eb: dc fa 03  call c,$03FA
03ee: 23        inc  hl
03ef: a7        and  a
03f0: c2 ea 03  jp   nz,$03EA
03f3: e1        pop  hl
03f4: 24        inc  h
03f5: 05        dec  b
03f6: c2 e7 03  jp   nz,$03E7
03f9: e7        rst  $20				; Unstack regs (and return)

				;; 17 bytes here
				;; Draw 8x8 8x8 block at hl
03fa: e5        push hl
03fb: d5        push de
03fc: c5        push bc
03fd: f5        push af
03fe: 01 ff 08  ld   bc,$08FF		; Count + Data
0401: 11 20 00  ld   de,$0020		; Line increment
0404: 71        ld   (hl),c
0405: 19        add  hl,de
0406: 05        dec  b
0407: c2 04 04  jp   nz,$0404
040a: e7        rst  $20				; Unstack regs (and return)
		
				;; Table, not code
040b: 6d        ld   l,l
040c: ff        rst  $38
040d: 19        add  hl,de
040e: 04        inc  b
040f: 05        dec  b
0410: 3e 04     ld   a,$04
0412: 2b        dec  hl
0413: 00        nop
				
0414: 05        dec  b
0415: 27        daa
0416: 05        dec  b
0417: 0f        rrca
0418: 04        inc  b
				
0419: 3b        dec  sp
041a: 00        nop
041b: 27        daa
041c: 04        inc  b
041d: 13        inc  de
041e: 9d        sbc  a,l
041f: 05        dec  b
0420: 22 04 27  ld   ($2704),hl
0423: 1d        dec  e
0424: 06 22     ld   b,$22
0426: 04        inc  b
0427: 36 fe     ld   (hl),$FE
0429: 35        dec  (hl)
042a: 04        inc  b
042b: 03        inc  bc
042c: 3e 04     ld   a,$04
042e: 30 04     jr   nc,$0434
0430: 03        inc  bc
0431: b4        or   h
0432: 04        inc  b
0433: 39        add  hl,sp
0434: 04        inc  b
0435: 7f        ld   a,a
0436: 00        nop
0437: 00        nop
0438: 00        nop
0439: 03        inc  bc
043a: 27        daa
043b: 05        dec  b
043c: 2b        dec  hl
043d: 04        inc  b
				
				;; Flag guy = 38 tall, 3 wide
043e: 03 26											; 0x03 wide, 0x26 tall
0440: 00 00											; Location?

0442: 80 01 00                  ; ..............## ##.............. ................
0445: 80 07 00                  ; ..............## ######.......... ................
0448: e0 0f 00                  ; ..........###### ########........ ................
044b: bc 1f 00                  ; ....########..## ##########...... ................
044e: e6 1b 00                  ; ..####....###### ####..####...... ................
0451: 67 1b 00                  ; ######....####.. ####..####...... ................
0454: 7f 0f 03                  ; ##############.. ########........ ####............
0457: ee 81 07                  ; ..######..###### ##............## ######..........
045a: 3c c0 0f                  ; ....########.... ............#### ########........
045d: 10 fc 1f                  ; ........##...... ....############ ##########......
0460: 10 c0 0f                  ; ........##...... ............#### ########........
0463: 20 40 0f                  ; ..........##.... ............##.. ########........
0466: 40 e0 0f                  ; ............##.. ..........###### ########........
0469: 80 f0 0f                  ; ..............## ........######## ########........
046c: 80 c1 0f                  ; ..............## ##..........#### ########........
046f: 80 c1 07                  ; ..............## ##..........#### ######..........
0472: 00 03 03                  ; ................ ####............ ####............
0475: 00 83 07                  ; ................ ####..........## ######..........
0478: 00 fe 3f                  ; ................ ..############## ############....
047b: 00 fe 7f                  ; ................ ..############## ##############..
047e: 00 e0 ef                  ; ................ ..........###### ########..######
0481: 00 80 cf                  ; ................ ..............## ########....####
0484: 00 80 cf                  ; ................ ..............## ########....####
0487: 00 80 cf                  ; ................ ..............## ########....####
048a: 00 80 cf                  ; ................ ..............## ########....####
048d: 00 80 df                  ; ................ ..............## ##########..####
0490: 00 c0 df                  ; ................ ............#### ##########..####
0493: 00 c0 1f                  ; ................ ............#### ##########......
0496: 00 e0 1f                  ; ................ ..........###### ##########......
0499: 00 f0 0e                  ; ................ ........######## ..######........
049c: 00 70 0e                  ; ................ ........######.. ..######........
049f: 00 38 0e                  ; ................ ......######.... ..######........
04a2: 00 38 1c                  ; ................ ......######.... ....######......
04a5: 00 30 38                  ; ................ ........####.... ......######....
04a8: 00 70 70                  ; ................ ........######.. ........######..
04ab: 00 60 60                  ; ................ ..........####.. ..........####..
04ae: 00 60 60                  ; ................ ..........####.. ..........####..
04b1: 00 78 78                  ; ................ ......########.. ......########..

				
				;; Flag guy = 37 tall, 3 wide
04b4: 03 25											; 0x03 wide, 0x25 tall
04b6: 20 00											; Location?
				
04b8: 80 01 00                  ; ..............## ##.............. ................
04bb: 80 07 00                  ; ..............## ######.......... ................
04be: e0 0f 00                  ; ..........###### ########........ ................
04c1: bc 19 00                  ; ....########..## ##....####...... ................
04c4: f6 19 00                  ; ..####..######## ##....####...... ................
04c7: ff 1f 03                  ; ################ ##########...... ####............
04ca: ef 8f 07                  ; ########..###### ########......## ######..........
04cd: ee c1 0f                  ; ..######..###### ##..........#### ########........
04d0: 3c fc 1f                  ; ....########.... ....############ ##########......
04d3: 10 c0 0f                  ; ........##...... ............#### ########........
04d6: 20 40 0f                  ; ..........##.... ............##.. ########........
04d9: 40 e0 0f                  ; ............##.. ..........###### ########........
04dc: 80 f0 0f                  ; ..............## ........######## ########........
04df: 80 c1 0f                  ; ..............## ##..........#### ########........
04e2: 80 c1 07                  ; ..............## ##..........#### ######..........
04e5: 00 03 03                  ; ................ ####............ ####............
04e8: 00 83 07                  ; ................ ####..........## ######..........
04eb: 00 fe 0f                  ; ................ ..############## ########........
04ee: 00 fe 0f                  ; ................ ..############## ########........
04f1: 00 e0 0f                  ; ................ ..........###### ########........
04f4: 00 80 0f                  ; ................ ..............## ########........
04f7: 00 80 0f                  ; ................ ..............## ########........
04fa: 00 80 0f                  ; ................ ..............## ########........
04fd: 00 80 0f                  ; ................ ..............## ########........
0500: 00 80 1f                  ; ................ ..............## ##########......
0503: 00 80 1f                  ; ................ ..............## ##########......
0506: 00 80 1f                  ; ................ ..............## ##########......
0509: 00 80 1f                  ; ................ ..............## ##########......
050c: 00 80 0f                  ; ................ ..............## ########........
050f: 00 80 07                  ; ................ ..............## ######..........
0512: 00 80 07                  ; ................ ..............## ######..........
0515: 00 80 07                  ; ................ ..............## ######..........
0518: 00 80 03                  ; ................ ..............## ####............
051b: 00 00 03                  ; ................ ................ ####............
051e: 00 00 03                  ; ................ ................ ####............
0521: 00 00 03                  ; ................ ................ ####............
0524: 00 c0 03                  ; ................ ............#### ####............

				
				;; Flag guy = 37 tall, 3 wide
0527: 03 26											; 0x03 wide, 0x25 tall
0529: 00 00											; Location

052b: 80 01 00                  ; ..............## ##.............. ................
052e: 80 07 00                  ; ..............## ######.......... ................
0531: e0 0d 00                  ; ..........###### ##..####........ ................
0534: f8 1d 00                  ; ......########## ##..######...... ................
0537: 9e 1f 00                  ; ..########....## ##########...... ................
053a: 9f 1b 00                  ; ##########....## ####..####...... ................
053d: ff 0f 03                  ; ################ ########........ ####............
0540: f6 81 07                  ; ..####..######## ##............## ######..........
0543: 3c c0 0f                  ; ....########.... ............#### ########........
0546: 10 fc 1f                  ; ........##...... ....############ ##########......
0549: 10 c0 0f                  ; ........##...... ............#### ########........
054c: 20 40 0f                  ; ..........##.... ............##.. ########........
054f: 40 e0 0f                  ; ............##.. ..........###### ########........
0552: 80 f0 0f                  ; ..............## ........######## ########........
0555: 80 c1 0f                  ; ..............## ##..........#### ########........
0558: 80 c1 07                  ; ..............## ##..........#### ######..........
055b: 00 03 03                  ; ................ ####............ ####............
055e: 00 83 07                  ; ................ ####..........## ######..........
0561: 00 fe 0f                  ; ................ ..############## ########........
0564: 00 fe 1f                  ; ................ ..############## ##########......
0567: 00 e0 3f                  ; ................ ..........###### ############....
056a: 00 80 6f                  ; ................ ..............## ########..####..
056d: 00 80 6f                  ; ................ ..............## ########..####..
0570: 00 80 6f                  ; ................ ..............## ########..####..
0573: 00 80 6f                  ; ................ ..............## ########..####..
0576: 00 80 3f                  ; ................ ..............## ############....
0579: 00 80 1f                  ; ................ ..............## ##########......
057c: 00 80 1f                  ; ................ ..............## ##########......
057f: 00 c0 1f                  ; ................ ............#### ##########......
0582: 00 c0 1f                  ; ................ ............#### ##########......
0585: 00 c0 07                  ; ................ ............#### ######..........
0588: 00 e0 03                  ; ................ ..........###### ####............
058b: 00 e0 19                  ; ................ ..........###### ##....####......
058e: 00 e0 1c                  ; ................ ..........###### ....######......
0591: 00 60 38                  ; ................ ..........####.. ......######....
0594: 00 60 70                  ; ................ ..........####.. ........######..
0597: 00 60 60                  ; ................ ..........####.. ..........####..
059a: 00 78 78                  ; ................ ......########.. ......########..

				
059d: 04        inc  b
059e: 1f        rra
059f: df        rst  $18
05a0: 00        nop
05a1: 00        nop
05a2: 00        nop
05a3: 30 00     jr   nc,$05A5
05a5: 00        nop
05a6: 00        nop
05a7: 78        ld   a,b
05a8: 00        nop
05a9: 00        nop
05aa: 00        nop
05ab: fc 00 00  call m,$0000
05ae: c0        ret  nz
05af: ff        rst  $38
05b0: 01 33 03  ld   bc,$0333
05b3: fc 00 33  call m,$3300
05b6: 03        inc  bc
05b7: f4 00 cc  call p,$CC00
05ba: 00        nop
05bb: fe 00     cp   $00
05bd: cc 00 ff  call z,$FF00
05c0: 00        nop
05c1: 33        inc  sp
05c2: 03        inc  bc
05c3: fc 00 33  call m,$3300
05c6: 03        inc  bc
05c7: 7c        ld   a,h
05c8: 00        nop
05c9: cc 00 30  call z,$3000
05cc: 00        nop
05cd: cc 00 f8  call z,$F800
05d0: 00        nop
05d1: ff        rst  $38
05d2: ff        rst  $38
05d3: ff        rst  $38
05d4: 1f        rra
05d5: 00        nop
05d6: f0        ret  p
05d7: ff        rst  $38
05d8: 3f        ccf
05d9: 00        nop
05da: 00        nop
05db: ff        rst  $38
05dc: 70        ld   (hl),b
05dd: 00        nop
05de: 00        nop
05df: fc e0 00  call m,$00E0
05e2: 00        nop
05e3: fc c0 00  call m,$00C0
05e6: 00        nop
05e7: f8        ret  m
05e8: 81        add  a,c
05e9: 00        nop
05ea: 00        nop
05eb: f8        ret  m
05ec: 81        add  a,c
05ed: 00        nop
05ee: 00        nop
05ef: f8        ret  m
05f0: 81        add  a,c
05f1: 00        nop
05f2: 00        nop
05f3: fc 03 00  call m,$0003
05f6: 00        nop
05f7: fc 03 00  call m,$0003
05fa: 00        nop
05fb: de 03     sbc  a,$03
05fd: 00        nop
05fe: 00        nop
05ff: 8e        adc  a,(hl)
0600: 03        inc  bc
0601: 00        nop
0602: 00        nop
0603: 07        rlca
0604: 07        rlca
0605: 00        nop
0606: 80        add  a,b
0607: 03        inc  bc
0608: 0e 00     ld   c,$00
060a: 80        add  a,b
060b: 01 fc 00  ld   bc,$00FC
060e: 80        add  a,b
060f: 01 f8 00  ld   bc,$00F8
0612: 80        add  a,b
0613: 01 80 00  ld   bc,$0080
0616: 80        add  a,b
0617: 01 80 00  ld   bc,$0080
061a: e0        ret  po
061b: 01 80 04  ld   bc,$0480
061e: 1f        rra
061f: df        rst  $18
0620: 00        nop
0621: 9f        sbc  a,a
0622: 0f        rrca
0623: 30 00     jr   nc,$0625
0625: 93        sub  e
0626: 0d        dec  c
0627: 78        ld   a,b
0628: 00        nop
0629: 83        add  a,e
062a: 0d        dec  c
062b: fc 00 83  call m,$8300
062e: cd ff 01  call $01FF
0631: 9b        sbc  a,e
0632: 0d        dec  c
0633: fc 00 93  call m,$9300
0636: 0d        dec  c
0637: f4 00 9f  call p,$9F00
063a: 0f        rrca
063b: fe 00     cp   $00
063d: 00        nop
063e: 00        nop
063f: fc 00 00  call m,$0000
0642: 20 f8     jr   nz,$063C
0644: 00        nop
0645: 00        nop
0646: 80        add  a,b
0647: 7c        ld   a,h
0648: 00        nop
0649: 00        nop
064a: 00        nop
064b: 30 00     jr   nc,$064D
064d: 00        nop
064e: 00        nop
064f: f8        ret  m
0650: 00        nop
0651: ff        rst  $38
0652: ff        rst  $38
0653: ff        rst  $38
0654: 1f        rra
0655: 33        inc  sp
0656: e3        ex   (sp),hl
0657: ff        rst  $38
0658: 3f        ccf
0659: 33        inc  sp
065a: 03        inc  bc
065b: ff        rst  $38
065c: 70        ld   (hl),b
065d: cc 00 fc  call z,$FC00
0660: e0        ret  po
0661: cc 00 fc  call z,$FC00
0664: c0        ret  nz
0665: 33        inc  sp
0666: 03        inc  bc
0667: f8        ret  m
0668: 81        add  a,c
0669: 33        inc  sp
066a: 03        inc  bc
066b: f8        ret  m
066c: 81        add  a,c
066d: cc 00 f8  call z,$F800
0670: 81        add  a,c
0671: cc 00 fc  call z,$FC00
0674: 03        inc  bc
0675: 00        nop
0676: 00        nop
0677: fc 03 00  call m,$0003
067a: 00        nop
067b: de 03     sbc  a,$03
067d: 00        nop
067e: 00        nop
067f: 8e        adc  a,(hl)
0680: 03        inc  bc
0681: 00        nop
0682: 00        nop
0683: 07        rlca
0684: 07        rlca
0685: 00        nop
0686: 80        add  a,b
0687: 03        inc  bc
0688: 0e 00     ld   c,$00
068a: 80        add  a,b
068b: 01 fc 00  ld   bc,$00FC
068e: 80        add  a,b
068f: 01 f8 00  ld   bc,$00F8
0692: 80        add  a,b
0693: 01 80 00  ld   bc,$0080
0696: 80        add  a,b
0697: 01 80 00  ld   bc,$0080
069a: e0        ret  po
069b: 01 80 e0  ld   bc,$E080

				;; Common interrupt routine
069e: e5        push hl
069f: db 00     in   a,($00)		; IN0
06a1: 47        ld   b,a				; Stash read value
06a2: db 00     in   a,($00)		; IN0
06a4: a8        xor  b
06a5: e6 40     and  $40				; Mask COIN
06a7: c2 be 06  jp   nz,$06BE		; Bit 6 unstable
				
06aa: 78        ld   a,b				; Restore read value
06ab: 21 20 20  ld   hl,$2020
06ae: ae        xor  (hl)				; xor
06af: 70        ld   (hl),b			; Store new value
06b0: e6 40     and  $40				; Mask COIN
06b2: ca be 06  jp   z,$06BE		; No change
				
06b5: 78        ld   a,b				; Restore read value
06b6: e6 40     and  $40
06b8: c2 be 06  jp   nz,$06BE		; Not pressed
				
06bb: 23        inc  hl					; == $2021
06bc: 36 01     ld   (hl),$01		; Set coin flag?
				
06be: 21 24 20  ld   hl,$2024
06c1: 7e        ld   a,(hl)
06c2: a9        xor  c					; c=0 for rst $08, 1 for rst $10
06c3: c2 da 06  jp   nz,$06DA		; Do nothing for rst $08, ($2024)==$00
				
06c6: 7e        ld   a,(hl)
06c7: 21 d2 06  ld   hl,$06D2		; Return address
06ca: e5        push hl
06cb: a7        and  a
06cc: c2 8b 08  jp   nz,$088B		; For ($2024)!=$00
06cf: c3 e0 06  jp   $06E0			; rst $10, ($2024)==$00

				;; Return address for IRQs
06d2: 21 24 20  ld   hl,$2024
06d5: 7e        ld   a,(hl)
06d6: 3c        inc  a
06d7: e6 01     and  $01
06d9: 77        ld   (hl),a

				;; End of IRQ routine
06da: e1        pop  hl
06db: d1        pop  de
06dc: c1        pop  bc
06dd: f1        pop  af
06de: fb        ei
06df: c9        ret
				
06e0: 3a 22 20  ld   a,($2022)	; Game state
06e3: a7        and  a
06e4: fa 9d 0a  jp   m,$0A9D		; D7 set = do big gfx in attract
				
06e7: c8        ret  z					; Do nothing if zero
				
06e8: 0f        rrca
06e9: d2 31 08  jp   nc,$0831		; Jump if even

				;; Redo pylons
06ec: 2a 27 20  ld   hl,($2027)	; Pointer to set of pylons
06ef: cd c9 09  call $09C9			; Erase big pylon?
06f2: cd c9 09  call $09C9			; Erase big pylon?
06f5: cd c9 09  call $09C9			; Erase big pylon?
06f8: cd c9 09  call $09C9			; Erase big pylon?
06fb: cd c9 09  call $09C9			; Erase big pylon?
06fe: cd c9 09  call $09C9			; Erase big pylon?
				
0701: 01 20 00  ld   bc,$0020		; Row increment
0704: cd e5 09  call $09E5			; Erase small pylon?
0707: cd e5 09  call $09E5			; Erase small pylon?
070a: cd e5 09  call $09E5			; Erase small pylon?
070d: cd e5 09  call $09E5			; Erase small pylon?
0710: cd e5 09  call $09E5			; Erase small pylon?
0713: cd e5 09  call $09E5			; Erase small pylon?

0716: 2a 25 20  ld   hl,($2025)	; Pointer to set of pylons
0719: cd fb 09  call $09FB			; Draw big pylon 
071c: cd fb 09  call $09FB			; Draw big pylon 
071f: cd fb 09  call $09FB			; Draw big pylon 
0722: cd fb 09  call $09FB			; Draw big pylon 
0725: cd fb 09  call $09FB			; Draw big pylon 
0728: cd fb 09  call $09FB			; Draw big pylon 
				
072b: cd 33 0a  call $0A33			; Draw small pylon
072e: cd 33 0a  call $0A33			; Draw small pylon
0731: cd 33 0a  call $0A33			; Draw small pylon
0734: cd 33 0a  call $0A33			; Draw small pylon
0737: cd 33 0a  call $0A33			; Draw small pylon
073a: cd 33 0a  call $0A33			; Draw small pylon
				
073d: cd ef 08  call $08EF
0740: 3a 3e 21  ld   a,($213E)
0743: 21 43 21  ld   hl,$2143
0746: 35        dec  (hl)
0747: f2 6d 07  jp   p,$076D
				
074a: 36 03     ld   (hl),$03
074c: 21 3e 21  ld   hl,$213E
074f: 7e        ld   a,(hl)
0750: 23        inc  hl
0751: be        cp   (hl)
0752: ca 6d 07  jp   z,$076D
				
0755: da 66 07  jp   c,$0766
				
0758: fe 04     cp   $04
075a: d2 61 07  jp   nc,$0761
075d: af        xor  a
075e: c3 6b 07  jp   $076B
0761: d6 04     sub  $04
0763: c3 6b 07  jp   $076B
0766: 5f        ld   e,a
0767: 3a 5a 20  ld   a,($205A)
076a: 83        add  a,e
076b: 2b        dec  hl
076c: 77        ld   (hl),a
				
076d: 5f        ld   e,a
076e: 16 00     ld   d,$00
0770: 2a 47 20  ld   hl,($2047)
0773: 7c        ld   a,h
0774: a7        and  a
0775: ca 7c 07  jp   z,$077C
0778: 19        add  hl,de
0779: 22 47 20  ld   ($2047),hl
077c: 2a 49 20  ld   hl,($2049)
077f: 7c        ld   a,h
0780: a7        and  a
0781: ca 88 07  jp   z,$0788
0784: 19        add  hl,de
0785: 22 49 20  ld   ($2049),hl
0788: eb        ex   de,hl
0789: 29        add  hl,hl			; de*2
078a: 29        add  hl,hl			; d3*4
078b: 29        add  hl,hl			; d3*8
078c: 29        add  hl,hl			; de*16
078d: eb        ex   de,hl
078e: 2a 3b 20  ld   hl,($203B)
0791: 19        add  hl,de
0792: 22 3b 20  ld   ($203B),hl
0795: 7c        ld   a,h
0796: 2f        cpl
0797: e6 1f     and  $1F
0799: c6 40     add  a,$40
079b: 32 03 20  ld   ($2003),a
079e: 4a        ld   c,d
079f: 16 00     ld   d,$00
07a1: 3a 37 20  ld   a,($2037)
07a4: cd 5c 08  call $085C
07a7: f5        push af
07a8: 78        ld   a,b
07a9: 32 02 20  ld   ($2002),a
07ac: 3a 22 20  ld   a,($2022)	; Game state
07af: ee 03     xor  $03
07b1: ca 30 08  jp   z,$0830
07b4: 3a 3e 21  ld   a,($213E)
07b7: a7        and  a
07b8: ca 30 08  jp   z,$0830
07bb: 3a 37 20  ld   a,($2037)
07be: 47        ld   b,a
07bf: cd 87 08  call $0887			; Complement a if negative
07c2: 0f        rrca
07c3: 0f        rrca
07c4: 0f        rrca
07c5: e6 06     and  $06
07c7: 2f        cpl
07c8: 3c        inc  a
07c9: c6 0b     add  a,$0B
07cb: b9        cp   c
07cc: d2 e8 07  jp   nc,$07E8
07cf: 2f        cpl
07d0: 3c        inc  a
07d1: 81        add  a,c
07d2: 3c        inc  a
07d3: 0f        rrca
07d4: e6 03     and  $03
07d6: 4f        ld   c,a
07d7: 32 41 21  ld   ($2141),a
07da: f1        pop  af
07db: 78        ld   a,b
07dc: 42        ld   b,d
07dd: a7        and  a
07de: f2 01 08  jp   p,$0801
07e1: 79        ld   a,c
07e2: 2f        cpl
07e3: 3c        inc  a
07e4: 4f        ld   c,a
07e5: c3 ff 07  jp   $07FF
07e8: af        xor  a
07e9: 32 41 21  ld   ($2141),a
07ec: 79        ld   a,c
07ed: 0f        rrca
07ee: e6 07     and  $07
07f0: 81        add  a,c
07f1: 79        ld   a,c
07f2: 3a 3a 20  ld   a,($203A)
07f5: cd 5c 08  call $085C
07f8: 42        ld   b,d
07f9: d1        pop  de
07fa: 82        add  a,d
07fb: 4f        ld   c,a
07fc: f2 01 08  jp   p,$0801
07ff: 06 ff     ld   b,$FF
0801: 2a 00 20  ld   hl,($2000)
0804: 09        add  hl,bc
0805: 22 00 20  ld   ($2000),hl
0808: 7c        ld   a,h
0809: a7        and  a
080a: ca 22 08  jp   z,$0822
080d: 3a 22 20  ld   a,($2022)	; Game state
0810: ee 05     xor  $05
0812: ca 1a 08  jp   z,$081A
0815: 21 22 20  ld   hl,$2022	; Game state
0818: 34        inc  (hl)
0819: c9        ret
081a: 7c        ld   a,h
081b: 2f        cpl
081c: 6f        ld   l,a
081d: 26 00     ld   h,$00
081f: 22 00 20  ld   ($2000),hl
0822: 7d        ld   a,l
0823: cd 87 08  call $0887							; Complement a if negative
0826: fe 28     cp   $28
0828: 7c        ld   a,h
0829: 8f        adc  a,a
082a: 32 40 21  ld   ($2140),a
082d: c3 31 08  jp   $0831							; Why not push af? 

				;; Get af from stack for $0831
0830: f1        pop  af									; Throw away calling address? 
				
0831: 21 45 20  ld   hl,$2045
0834: db 00     in   a,($00)						; IN0
0836: 77        ld   (hl),a							; Store IN0 
0837: 23        inc  hl
0838: db 01     in   a,($01)						; IN1
083a: 77        ld   (hl),a							; Store IN1
				
083b: cd 4e 08  call $084E			; Handle audio port 2 timer
083e: 21 3f 20  ld   hl,$203F
0841: cd 49 08  call $0849			; Handle timer $203F
0844: 23        inc  hl					; hl=$2040
0845: cd 49 08  call $0849			; Handle timer $2040
0848: 23        inc  hl					; hl=$2041

				;; Handle timer
0849: 7e        ld   a,(hl)
084a: a7        and  a
084b: c8        ret  z					; Skip if zero
084c: 35        dec  (hl)				; Decrement
084d: c9        ret
		
				;; Handle audio port 2 timer
084e: 21 2e 20  ld   hl,$202E		; Audio port 2 timer
0851: 7e        ld   a,(hl)
0852: a7        and  a
0853: c8        ret  z					; Skip if 0
0854: 35        dec  (hl)				; Decrement timer
0855: c0        ret  nz					; Return if not 0
				
0856: 3a 2d 20  ld   a,($202D)	; Audio port 2 default
0859: d3 05     out  ($05),a		; Audio Port 2
085b: c9        ret

				;; a = index into $116D table
				;; c = index into $122E table
				;; d should be 0
085c: a7        and  a
085d: f5        push af
085e: cd 87 08  call $0887			; Complement a if negative
0861: 5f        ld   e,a
0862: 21 6d 11  ld   hl,$116D
0865: 19        add  hl,de			; hl = $116D + a
0866: 7e        ld   a,(hl)
0867: 47        ld   b,a				; Store table value
0868: 59        ld   e,c
0869: 21 2e 12  ld   hl,$122E		; hl = $116D + c
086c: 19        add  hl,de
086d: 86        add  a,(hl)
086e: f2 7b 08  jp   p,$087B		; sum positive
				
0871: 5a        ld   e,d				; e=0
0872: fe ee     cp   $EE
0874: da 81 08  jp   c,$0881
0877: 1c        inc  e					; e=1
0878: c3 81 08  jp   $0881
				
087b: 5f        ld   e,a				
087c: 21 ae 11  ld   hl,$11AE
087f: 19        add  hl,de			; hl = $11AE + a
0880: 5e        ld   e,(hl)			; Get e from table
				
0881: f1        pop  af					; Use flags for ret p?
0882: 7b        ld   a,e
0883: f0        ret  p
0884: 2f        cpl
0885: 3c        inc  a
0886: c9        ret

				
				;; Complement a if negative
0887: a7        and  a
0888: f0        ret  p
0889: 2f        cpl
088a: c9        ret

			
				;; IRQ routine for $2024 non-zero
088b: 3a 22 20  ld   a,($2022)	; Game state
088e: a7        and  a
088f: f8        ret  m					; Return if high bit set
				
0890: 0f        rrca
0891: d0        ret  nc					; REturn if low bit was set
				
0892: 2a 27 20  ld   hl,($2027)
0895: 11 46 00  ld   de,$0046		; $0e * $05
0898: 19        add  hl,de
0899: cd c9 09  call $09C9			; Erase big pylon?
089c: cd c9 09  call $09C9			; Erase big pylon?
089f: 2a 25 20  ld   hl,($2025)
08a2: 11 46 00  ld   de,$0046		; $0e * $05
08a5: 19        add  hl,de
08a6: cd 5c 0a  call $0A5C			; Draw pylon (no or)
08a9: cd 5c 0a  call $0A5C			; Draw pylon (no or)
08ac: 2a 27 20  ld   hl,($2027)
08af: 11 3c 00  ld   de,$003C		; $0a * $05
08b2: 19        add  hl,de
08b3: cd c9 09  call $09C9			; Erase big pylon?
08b6: cd c9 09  call $09C9			; Erase big pylon?
08b9: 2a 25 20  ld   hl,($2025)
08bc: 11 3c 00  ld   de,$003C		; $0a * $05
08bf: 19        add  hl,de
08c0: cd 5c 0a  call $0A5C			; Draw plyon (no or)
08c3: cd 5c 0a  call $0A5C			; Draw pylon (no or)
				
				;; Swap ($2027) and ($2025)
08c6: 2a 27 20  ld   hl,($2027)
08c9: eb        ex   de,hl
08ca: 2a 25 20  ld   hl,($2025)
08cd: 22 27 20  ld   ($2027),hl
08d0: eb        ex   de,hl
08d1: 22 25 20  ld   ($2025),hl
				
08d4: 22 60 20  ld   ($2060),hl
08d7: 3e 05     ld   a,$05
08d9: d3 04     out  ($04),a			; MB14241 Count
08db: af        xor  a
08dc: d3 03     out  ($03),a			; MB14241 Data
08de: 3a 03 20  ld   a,($2003)
08e1: cd 0d 09  call $090D
				
08e4: 21 03 20  ld   hl,$2003
08e7: 7e        ld   a,(hl)
08e8: c6 20     add  a,$20
08ea: 77        ld   (hl),a
08eb: d2 e1 08  jp   nc,$08E1
08ee: c9        ret
08ef: 2a 60 20  ld   hl,($2060)
08f2: 7c        ld   a,h
08f3: b5        or   l
08f4: c8        ret  z
08f5: 3e 05     ld   a,$05
08f7: d3 04     out  ($04),a			; MB14241 Count
08f9: af        xor  a
08fa: d3 03     out  ($03),a			; MB14241 Data
08fc: 21 03 20  ld   hl,$2003
08ff: 7e        ld   a,(hl)
0900: e6 1f     and  $1F
0902: 77        ld   (hl),a
0903: cd 0d 09  call $090D
0906: 21 03 20  ld   hl,$2003
0909: 7e        ld   a,(hl)
090a: c6 20     add  a,$20
090c: 77        ld   (hl),a
				
090d: 4f        ld   c,a
090e: 06 00     ld   b,$00
0910: 21 45 21  ld   hl,$2145
0913: 09        add  hl,bc			; hl=$2145+a
0914: 4e        ld   c,(hl)
0915: 3a 02 20  ld   a,($2002)
0918: 81        add  a,c
0919: a7        and  a
091a: f2 2b 09  jp   p,$092B
				
091d: fe ee     cp   $EE
091f: d2 26 09  jp   nc,$0926
				
0922: 68        ld   l,b
0923: c3 31 09  jp   $0931
				
0926: 2e 01     ld   l,$01
0928: c3 31 09  jp   $0931
				
092b: 4f        ld   c,a
092c: 21 ae 11  ld   hl,$11AE
092f: 09        add  hl,bc
0930: 6e        ld   l,(hl)
0931: 60        ld   h,b
0932: 3a 37 20  ld   a,($2037)
0935: a7        and  a
0936: f2 3f 09  jp   p,$093F
0939: af        xor  a
093a: 95        sub  l
093b: 6f        ld   l,a
093c: 78        ld   a,b
093d: 9c        sbc  a,h
093e: 67        ld   h,a
093f: eb        ex   de,hl
0940: 2a 00 20  ld   hl,($2000)
0943: 19        add  hl,de
0944: 22 04 20  ld   ($2004),hl
0947: 3a 03 20  ld   a,($2003)
094a: 4f        ld   c,a
094b: 21 45 22  ld   hl,$2245
094e: 09        add  hl,bc
094f: 7e        ld   a,(hl)
0950: 32 08 20  ld   ($2008),a
0953: 57        ld   d,a
0954: 7e        ld   a,(hl)
0955: 21 06 20  ld   hl,$2006
0958: 0f        rrca
0959: e6 7f     and  $7F
095b: 5f        ld   e,a
095c: 0f        rrca
095d: e6 1f     and  $1F
095f: 77        ld   (hl),a
0960: 23        inc  hl
0961: 0f        rrca
0962: 0f        rrca
0963: e6 07     and  $07
0965: 4f        ld   c,a
0966: 3c        inc  a
0967: 77        ld   (hl),a
0968: 7a        ld   a,d
0969: 50        ld   d,b
096a: 83        add  a,e
096b: 5f        ld   e,a
096c: d5        push de
096d: 2a 04 20  ld   hl,($2004)
0970: 19        add  hl,de
0971: e5        push hl
0972: 09        add  hl,bc
0973: 7c        ld   a,h
0974: e1        pop  hl
0975: cd 8d 09  call $098D
0978: d1        pop  de
0979: af        xor  a
097a: 93        sub  e
097b: 5f        ld   e,a
097c: 3e 00     ld   a,$00
097e: 9a        sbc  a,d
097f: 57        ld   d,a
0980: af        xor  a
0981: 91        sub  c
0982: 4f        ld   c,a
0983: 3e 00     ld   a,$00
0985: 98        sbc  a,b
0986: 47        ld   b,a
0987: 2a 04 20  ld   hl,($2004)
098a: 09        add  hl,bc
098b: 19        add  hl,de
098c: 7c        ld   a,h
098d: a7        and  a
098e: c2 bc 09  jp   nz,$09BC
0991: eb        ex   de,hl
0992: 2a 60 20  ld   hl,($2060)
0995: 3a 07 20  ld   a,($2007)
0998: 77        ld   (hl),a
0999: 23        inc  hl
099a: 3a 06 20  ld   a,($2006)
099d: 77        ld   (hl),a
099e: 23        inc  hl
099f: 7b        ld   a,e
09a0: d3 03     out  ($03),a			; MB14241 Data
09a2: e6 07     and  $07
09a4: 77        ld   (hl),a
09a5: 23        inc  hl
09a6: 3a 08 20  ld   a,($2008)
09a9: d3 03     out  ($03),a			; MB14241 Data
09ab: db 03     in   a,($03)			; MB14241 Result
09ad: 77        ld   (hl),a
09ae: 23        inc  hl
09af: af        xor  a
09b0: d3 03     out  ($03),a			; MB14241 Data
09b2: db 03     in   a,($03)			; MB14241 Result
09b4: c6 24     add  a,$24
09b6: 77        ld   (hl),a
09b7: 23        inc  hl
09b8: 22 60 20  ld   ($2060),hl
09bb: c9        ret
09bc: 2a 60 20  ld   hl,($2060)
09bf: 36 00     ld   (hl),$00
09c1: 11 05 00  ld   de,$0005
09c4: 19        add  hl,de
09c5: 22 60 20  ld   ($2060),hl
09c8: c9        ret


				;; Erase big pylon @ hl
09c9: 7e        ld   a,(hl)			; Acrive flag?
09ca: a7        and  a
09cb: ca 61 0a  jp   z,$0A61		; Jump to end if a==0
				
09ce: 23        inc  hl					; +1
09cf: 46        ld   b,(hl)			; Height
09d0: 23        inc  hl					; +2
09d1: 23        inc  hl					; +3
09d2: 5e        ld   e,(hl)			; Screen loc low
09d3: 23        inc  hl					; +4
09d4: 56        ld   d,(hl)			; Screen loc high
09d5: 23        inc  hl					; +5
09d6: e5        push hl					; Store hl
				
09d7: eb        ex   de,hl			; hl = screen loc
09d8: 11 1f 00  ld   de,$001F		; Row increment -1
09db: 72        ld   (hl),d			; ==0
09dc: 23        inc  hl
09dd: 72        ld   (hl),d			; ==0
09de: 19        add  hl,de			; Next row
09df: 05        dec  b
09e0: c2 db 09  jp   nz,$09DB		; Loop
09e3: e1        pop  hl
09e4: c9        ret

				;; Erase small pylon at hl
09e5: 7e        ld   a,(hl)			; Active flag?
09e6: a7        and  a
09e7: ca 61 0a  jp   z,$0A61		; Jump to end if a==0
				
09ea: 23        inc  hl					; +1
09eb: 7e        ld   a,(hl)			; Loop counter
09ec: 23        inc  hl					; +2
09ed: 23        inc  hl					; +3
09ee: 5e        ld   e,(hl)			; Screen loc low
09ef: 23        inc  hl					; +4
09f0: 56        ld   d,(hl)			; Screen log high
09f1: 23        inc  hl					; +5
				
09f2: eb        ex   de,hl			; hl = screen loc
09f3: 70        ld   (hl),b			; b=0 (erase)
09f4: 09        add  hl,bc			; bc=$0020 = line increment
09f5: 3d        dec  a
09f6: c2 f3 09  jp   nz,$09F3		; Loop
09f9: eb        ex   de,hl			; Swap back
09fa: c9        ret

				;; Draw big pylon?
09fb: 7e        ld   a,(hl)			; Active flag
09fc: a7        and  a
09fd: ca 61 0a  jp   z,$0A61
				
0a00: 4f        ld   c,a				; Width
0a01: 23        inc  hl					; +1
0a02: 46        ld   b,(hl)			; Height
0a03: 23        inc  hl					; +2
0a04: 7e        ld   a,(hl)			; Shift
0a05: 23        inc  hl					; +3
0a06: 5e        ld   e,(hl)			; Screen loc low
0a07: 23        inc  hl					; +4
0a08: 56        ld   d,(hl)			; Screen loc high
0a09: 23        inc  hl					; +5
0a0a: e5        push hl
				
0a0b: eb        ex   de,hl			; hl = screen loc
0a0c: d3 04     out  ($04),a			; MB14241 Count
0a0e: af        xor  a
0a0f: d3 03     out  ($03),a			; MB14241 Data

				;; set c LSBs in a
0a11: 57        ld   d,a				; d=0
0a12: e5        push hl
0a13: 59        ld   e,c
0a14: 21 94 0a  ld   hl,$0A94		; Table of bits
0a17: 19        add  hl,de
0a18: 7e        ld   a,(hl)
				
0a19: d3 03     out  ($03),a			; MB14241 Data
0a1b: db 03     in   a,($03)			; MB14241 Result
0a1d: 4f        ld   c,a
0a1e: af        xor  a
0a1f: d3 03     out  ($03),a			; MB14241 Data
0a21: 1e 1f     ld   e,$1F			; Line increment (d=0)
0a23: e1        pop  hl
				
0a24: 7e        ld   a,(hl)			; Read screen
0a25: b1        or   c					; or
0a26: 77        ld   (hl),a			; Store screen
0a27: 23        inc  hl
0a28: db 03     in   a,($03)			; MB14241 Result
0a2a: b6        or   (hl)				; or screen
0a2b: 77        ld   (hl),a			; Store screen
0a2c: 19        add  hl,de			; Next row
0a2d: 05        dec  b
0a2e: c2 24 0a  jp   nz,$0A24		; Loop
0a31: e1        pop  hl
0a32: c9        ret

				;; Draw small pylon
0a33: 7e        ld   a,(hl)			; Active flag
0a34: a7        and  a
0a35: ca 61 0a  jp   z,$0A61		; Skip if inactive
				
0a38: 23        inc  hl					; +1
0a39: 46        ld   b,(hl)			; Height
0a3a: 23        inc  hl					; +2
0a3b: 7e        ld   a,(hl)			; Shift
				
0a3c: d3 04     out  ($04),a			; MB14241 Count
0a3e: af        xor  a
0a3f: d3 03     out  ($03),a			; MB14241 Data
0a41: 3e 01     ld   a,$01
0a43: d3 03     out  ($03),a			; MB14241 Data
0a45: db 03     in   a,($03)			; MB14241 Result
0a47: 4f        ld   c,a				; Store
0a48: 23        inc  hl					; +3
0a49: 5e        ld   e,(hl)			; Screen loc lo
0a4a: 23        inc  hl					; +4
0a4b: 56        ld   d,(hl)			; Screen loc hi
0a4c: 23        inc  hl					; +5
0a4d: e5        push hl					; Store table
0a4e: eb        ex   de,hl			; hl = screen address
0a4f: 11 20 00  ld   de,$0020		; Line increment
0a52: 7e        ld   a,(hl)			; Load screen
0a53: b1        or   c					; or
0a54: 77        ld   (hl),a			; Store screen
0a55: 19        add  hl,de			; Next line
0a56: 05        dec  b
0a57: c2 52 0a  jp   nz,$0A52		; Loop for height
0a5a: e1        pop  hl					; Get table back
0a5b: c9        ret

				;; Draw pylon w/o or
0a5c: 7e        ld   a,(hl)
0a5d: a7        and  a
0a5e: c2 66 0a  jp   nz,$0A66		; Continue if active

				;; End of routine
				;; Go to next able entry and return
0a61: 11 05 00  ld   de,$0005
0a64: 19        add  hl,de
0a65: c9        ret
				
0a66: 4f        ld   c,a				; Width
0a67: 23        inc  hl					; +1
0a68: 46        ld   b,(hl)			; Height
0a69: 23        inc  hl					; +2
0a6a: 7e        ld   a,(hl)			; Shift
0a6b: 23        inc  hl					; +3
0a6c: 5e        ld   e,(hl)			; Screen loc lo
0a6d: 23        inc  hl					; +4
0a6e: 56        ld   d,(hl)			; Screen low hi
0a6f: 23        inc  hl					; +5
0a70: e5        push hl					; Stash table
0a71: d5        push de					; Stash screen loc
0a72: d3 04     out  ($04),a			; MB14241 Count
0a74: af        xor  a
0a75: d3 03     out  ($03),a			; MB14241 Data

					;; set c LSBs in a
0a77: 57        ld   d,a				; d=0
0a78: 59        ld   e,c				; e=width
0a79: 21 94 0a  ld   hl,$0A94		; ??
0a7c: 19        add  hl,de
0a7d: 7e        ld   a,(hl)
				
0a7e: d3 03     out  ($03),a			; MB14241 Data
0a80: db 03     in   a,($03)			; MB14241 Result
0a82: 4f        ld   c,a				; Result to c
0a83: af        xor  a					;	a=0	 
0a84: d3 03     out  ($03),a			; MB14241 Data
0a86: db 03     in   a,($03)			; MB14241 Result
0a88: 1e 1f     ld   e,$1F			; Line inrement
0a8a: e1        pop  hl
0a8b: 71        ld   (hl),c			; Write screen
0a8c: 23        inc  hl
0a8d: 77        ld   (hl),a			; a=0
0a8e: 19        add  hl,de			; Next line
0a8f: 05        dec  b
0a90: c2 8b 0a  jp   nz,$0A8B		; Loop for height
0a93: e1        pop  hl
0a94: c9        ret

				;; Data
0a95: 01 03 07 0f								; DATA Bits walking from LSB
0a99: 1f 3f 7f ff								; DATA

				
0a9d: cd aa 0a  call $0AAA
0aa0: cd e8 0a  call $0AE8			; Draw big gfx
0aa3: 21 da 06  ld   hl,$06DA
0aa6: e3        ex   (sp),hl		; Set return address?
0aa7: c3 31 08  jp   $0831
				
0aaa: 21 4b 20  ld   hl,$204B
0aad: 35        dec  (hl)
0aae: f2 ba 0a  jp   p,$0ABA
0ab1: eb        ex   de,hl			; de = $204B
0ab2: 2a 4d 20  ld   hl,($204D)
0ab5: 06 09     ld   b,$09
0ab7: cd df 0a  call $0ADF			; Copy (hl) to (de) b times
0aba: 21 54 20  ld   hl,$2054
0abd: 3a 4c 20  ld   a,($204C)
0ac0: 86        add  a,(hl)
0ac1: 77        ld   (hl),a
0ac2: 23        inc  hl
0ac3: 4f        ld   c,a
0ac4: e6 07     and  $07
0ac6: 77        ld   (hl),a
0ac7: 23        inc  hl
0ac8: 79        ld   a,c
0ac9: 0f        rrca
0aca: 0f        rrca
0acb: 0f        rrca
0acc: e6 1f     and  $1F
0ace: c6 a0     add  a,$A0
0ad0: 77        ld   (hl),a
0ad1: 23        inc  hl
0ad2: 36 29     ld   (hl),$29
0ad4: 21 4f 20  ld   hl,$204F
0ad7: 35        dec  (hl)
0ad8: f0        ret  p
0ad9: eb        ex   de,hl
0ada: 2a 52 20  ld   hl,($2052)
0add: 06 05     ld   b,$05

				;; Copy (hl) to (de) b times
0adf: 7e        ld   a,(hl)
0ae0: 23        inc  hl
0ae1: 12        ld   (de),a
0ae2: 13        inc  de
0ae3: 05        dec  b
0ae4: c2 df 0a  jp   nz,$0ADF
0ae7: c9        ret

				
				;; Draw big gfx
0ae8: 2a 56 20  ld   hl,($2056)					; Big gfx loc offset 
0aeb: 7c        ld   a,h
0aec: b5        or   l
0aed: c8        ret  z									; Skip if hl == $0000
				 
0aee: 2a 58 20  ld   hl,($2058)					; Big gfx loc store				 
0af1: 7c        ld   a,h
0af2: b5        or   l
0af3: ca 08 0b  jp   z,$0B08						; Skip if hl == $0000

				;; Erase big gfx
0af6: 01 26 05  ld   bc,$0526						; b = width, c = height
0af9: 11 1b 00  ld   de,$001B						; d = write val, e = $20-b
0afc: 78        ld   a,b
0afd: 72        ld   (hl),d							; (0) 
0afe: 23        inc  hl
0aff: 3d        dec  a
0b00: c2 fd 0a  jp   nz,$0AFD						; Loop for width
				 
0b03: 19        add  hl,de							; Next line 
0b04: 0d        dec  c
0b05: c2 fc 0a  jp   nz,$0AFC						; Loop for height
				
0b08: 2a 4d 20  ld   hl,($204D)
0b0b: 7c        ld   a,h
0b0c: b5        or   l
0b0d: c2 18 0b  jp   nz,$0B18						; Draw if hl != $0000 
				
0b10: 3e 01     ld   a,$01
0b12: 32 22 20  ld   ($2022),a					; Game state
0b15: c3 52 0b  jp   $0B52							; Draw pylons only 

				;; Draw large gfx
0b18: 2a 50 20  ld   hl,($2050)
0b1b: 4e        ld   c,(hl)							; Width 
0b1c: 23        inc  hl
0b1d: 46        ld   b,(hl)							; Height 
0b1e: 23        inc  hl
0b1f: 5e        ld   e,(hl)							; Initial loc lo 
0b20: 23        inc  hl
0b21: 56        ld   d,(hl)							; Initial loc hi 
0b22: 23        inc  hl
0b23: e5        push hl									; Data ptr 
0b24: 2a 56 20  ld   hl,($2056)					; Loc offset 
0b27: 19        add  hl,de
0b28: 22 58 20  ld   ($2058),hl					; Loc store 
0b2b: 3a 55 20  ld   a,($2055)					; Big sprite shift 
0b2e: d3 04     out  ($04),a						; MB14241 Count
0b30: af        xor  a
0b31: d3 03     out  ($03),a						; MB14241 Data
0b33: d1        pop  de									; Data ptr 
0b34: c5        push bc
0b35: e5        push hl
0b36: 1a        ld   a,(de)							; Read table
0b37: 13        inc  de
0b38: d3 03     out  ($03),a						; MB14241 Data
0b3a: db 03     in   a,($03)						; MB14241 Result
0b3c: 77        ld   (hl),a							; Write to screen 
0b3d: 23        inc  hl
0b3e: 0d        dec  c
0b3f: c2 36 0b  jp   nz,$0B36						; Loop for width 
0b42: af        xor  a
0b43: d3 03     out  ($03),a						; MB14241 Data
0b45: db 03     in   a,($03)						; MB14241 Result
0b47: 77        ld   (hl),a							; Final write 
0b48: 01 20 00  ld   bc,$0020						; Line increment 
0b4b: e1        pop  hl
0b4c: 09        add  hl,bc
0b4d: c1        pop  bc
0b4e: 05        dec  b
0b4f: c2 34 0b  jp   nz,$0B34						; Loop for height

				;; Draw pylons
0b52: 2a 25 20  ld   hl,($2025)
0b55: 11 3c 00  ld   de,$003C						; = $0c x $05 
0b58: 19        add  hl,de
0b59: cd fb 09  call $09FB							; Draw big pylon 
0b5c: cd fb 09  call $09FB							; Draw big pylon
0b5f: c9        ret

								
0b60: 7f        ld   a,a								; Garbage byte? 
		
0b61: 01 00 ff  ld   bc,$FF00
0b64: 31 05 20  ld   sp,$2005
0b67: cd 62 01  call $0162							; Write c to $4000 b*32 times
0b6a: 31 00 24  ld   sp,$2400
0b6d: cd af 10  call $10AF
0b70: 21 ff ff  ld   hl,$FFFF
0b73: 22 09 20  ld   ($2009),hl
0b76: 22 0b 20  ld   ($200B),hl
0b79: cd b3 0e  call $0EB3
0b7c: fb        ei
0b7d: c3 1f 0e  jp   $0E1F

0b80: d3 07     out  ($07),a						; Watchdog
0b82: 21 21 20  ld   hl,$2021		; Coin flag
0b85: 7e        ld   a,(hl)
0b86: a7        and  a
0b87: ca b8 0b  jp   z,$0BB8		; No coin
				
0b8a: af        xor  a
0b8b: 77        ld   (hl),a			; Clear coin flag
0b8c: 47        ld   b,a				; b-0
0b8d: 3e 0a     ld   a,$0A
0b8f: 32 2e 20  ld   ($202E),a		; Audio port 2 timer
0b92: 3e 22     ld   a,$22
0b94: d3 05     out  ($05),a						; Audio Port 2
0b96: db 02     in   a,($02)						; IN2 
0b98: 07        rlca						; 65432107
0b99: e6 06     and  $06				; Mask DIPS <1:0> = Coinage
0b9b: 4f        ld   c,a
0b9c: 21 cf 0f  ld   hl,$0FCF		; Coinage Table 
0b9f: 09        add  hl,bc

				;; Get de from table 
0ba0: 5e        ld   e,(hl)			; Coins needed
0ba1: 23        inc  hl
0ba2: 56        ld   d,(hl)			; Credits
				
0ba3: 21 2f 20  ld   hl,$202F		; Coins
0ba6: 34        inc  (hl)
0ba7: 7e        ld   a,(hl)
0ba8: bb        cp   e
0ba9: c2 b8 0b  jp   nz,$0BB8		; Not enough coins
				 
0bac: 70        ld   (hl),b			; b=($2021)
0bad: 23        inc  hl					; Credits
0bae: 7e        ld   a,(hl)
0baf: 82        add  a,d				; Add credits
0bb0: 77        ld   (hl),a			; Store
				
0bb1: 3a 23 20  ld   a,($2023)	
0bb4: a7        and  a
0bb5: ca 2a 0c  jp   z,$0C2A		; Skip if 0
				
0bb8: cd 0f 10  call $100F
0bbb: 3a 23 20  ld   a,($2023)
0bbe: a7        and  a
0bbf: ca 21 0c  jp   z,$0C21
				
0bc2: 21 41 20  ld   hl,$2041
0bc5: 7e        ld   a,(hl)
0bc6: a7        and  a
0bc7: c2 12 0c  jp   nz,$0C12
0bca: 36 3c     ld   (hl),$3C
0bcc: 21 34 20  ld   hl,$2034
0bcf: 35        dec  (hl)
0bd0: 21 42 20  ld   hl,$2042
0bd3: 7e        ld   a,(hl)
0bd4: c6 99     add  a,$99
0bd6: 27        daa
0bd7: 77        ld   (hl),a
0bd8: c2 0f 0c  jp   nz,$0C0F
0bdb: 3a 23 20  ld   a,($2023)
0bde: ee 03     xor  $03
0be0: ca b6 0d  jp   z,$0DB6
				
0be3: db 02     in   a,($02)						; IN2
0be5: 0f        rrca
0be6: 0f        rrca
0be7: 0f        rrca
0be8: e6 06     and  $06								; Was bits 5,4
0bea: 4f        ld   c,a
0beb: 06 00     ld   b,$00
0bed: 21 1d 00  ld   hl,$001D						; Index into table 
0bf0: 09        add  hl,bc
0bf1: 4e        ld   c,(hl)							; (Score for extended play)
0bf2: 21 3e 20  ld   hl,$203E						; Score 
0bf5: 7e        ld   a,(hl)
0bf6: e6 f0     and  $F0								; Mask 2nd nybble 
0bf8: 2b        dec  hl
0bf9: 86        add  a,(hl)							; Get 3rd nybble 
0bfa: 0f        rrca										; Rotate 
0bfb: 0f        rrca
0bfc: 0f        rrca
0bfd: 0f        rrca
0bfe: b9        cp   c									; Compare to table value 
0bff: da b6 0d  jp   c,$0DB6
0c02: 3e 03     ld   a,$03
0c04: 32 23 20  ld   ($2023),a
0c07: 3a 44 20  ld   a,($2044)
0c0a: 32 42 20  ld   ($2042),a
0c0d: f7        rst  $30
0c0e: 81																; Argument for rst $30 
0c0f: cd f1 0f  call $0FF1			; Update time
0c12: 21 23 20  ld   hl,$2023
0c15: 7e        ld   a,(hl)
0c16: fe 01     cp   $01
0c18: c0        ret  nz
0c19: 3a 3d 20  ld   a,($203D)	; Player score
0c1c: fe 01     cp   $01
0c1e: d8        ret  c
0c1f: 34        inc  (hl)
0c20: c9        ret
		
				;; Chekc start botton
0c21: cd 88 10  call $1088			; Kick PRNG, get #
0c24: 3a 45 20  ld   a,($2045)	; IN 0 store
0c27: e6 80     and  $80				; Mask Start
0c29: c0        ret  nz					; Not pressed
				
0c2a: 21 30 20  ld   hl,$2030		; Credits
0c2d: 7e        ld   a,(hl)
0c2e: a7        and  a
0c2f: c8        ret  z					; No credits
				
0c30: 35        dec  (hl)				; Decrenent credits
				
				;; Go to game mode
0c31: 31 00 24  ld   sp,$2400		; Rwset stack pointer
0c34: af        xor  a
0c35: 32 22 20  ld   ($2022),a	; Leave Attract mode state

				;; Copy score to previous
0c38: 2a 3d 20  ld   hl,($203D)	; Player score
0c3b: 22 29 20  ld   ($2029),hl	; Previous score

				;; Clear $2032-2057
0c3e: 11 32 20  ld   de,$2032
0c41: 06 28     ld   b,$28
0c43: 12        ld   (de),a			
0c44: 13        inc  de
0c45: 05        dec  b
0c46: c2 43 0c  jp   nz,$0C43
				
0c49: 67        ld   h,a				; h=a=0
0c4a: db 02     in   a,($02)		; IN2
0c4c: 0f        rrca						; 07654321
0c4d: e6 06     and  $06				; Mask game time
0c4f: 6f        ld   l,a
0c50: 11 d7 0f  ld   de,$0FD7		; Game time table
0c53: 19        add  hl,de
0c54: 7e        ld   a,(hl)			; Get game time
0c55: 32 42 20  ld   ($2042),a	; Tore game time
0c58: 23        inc  hl
0c59: 7e        ld   a,(hl)			; Get bonus time
0c5a: 32 44 20  ld   ($2044),a	; Store bonus time
0c5d: 3e 00     ld   a,$00
0c5f: 32 2d 20  ld   ($202D),a	; Audio port 2 default
0c62: 3e 20     ld   a,$20
0c64: d3 02     out  ($02),a		; Sound Port 1
0c66: cd 98 0e  call $0E98
				
0c69: 3e 01     ld   a,$01
0c6b: 32 23 20  ld   ($2023),a
0c6e: 3e ff     ld   a,$FF			; Time value
0c70: 32 41 20  ld   ($2041),a	; Set timer
0c73: 3e f8     ld   a,$F8
0c75: 32 48 20  ld   ($2048),a
0c78: db 00     in   a,($00)		; IN0
0c7a: e6 10     and  $10				; Mask shifter 
0c7c: ca 81 0c  jp   z,$0C81
				
0c7f: f7        rst  $30				; Add string to table
0c80: 65												; Argument for rst $30 
				
0c81: ef        rst  $28				; (Call $0F16)
0c82: 04												; DATA Data for $0F16
0c83: 21 0b 04  ld   hl,$040B		; 9-byte table address
0c86: 22 4d 20  ld   ($204D),hl	; Write table address
0c89: 3e e0     ld   a,$E0
0c8b: 32 54 20  ld   ($2054),a
0c8e: 3e ff     ld   a,$FF
0c90: 32 22 20  ld   ($2022),a	; Game state
0c93: ef        rst  $28				; (Call $0F16)
0c94: e8												; DATA Data for $0F16
0c95: cd 80 0b  call $0B80
0c98: 21 40 21  ld   hl,$2140
0c9b: 7e        ld   a,(hl)
0c9c: 23        inc  hl
0c9d: b6        or   (hl)
0c9e: ca b0 0c  jp   z,$0CB0
0ca1: 3a 3e 21  ld   a,($213E)
0ca4: a7        and  a
0ca5: ca b0 0c  jp   z,$0CB0
0ca8: cd 33 0f  call $0F33			
0cab: 04 00											; DATA Data for $0F33
0cad: c3 b5 0c  jp   $0CB5
				
0cb0: cd 33 0f  call $0F33
0cb3: 00 00											; DATA Data for $0F33
0cb5: 21 22 20  ld   hl,$2022		; Game state
0cb8: 7e        ld   a,(hl)
0cb9: ee 05     xor  $05
0cbb: c2 c7 0c  jp   nz,$0CC7

				;; ($2022) == $05
0cbe: 3a 40 20  ld   a,($2040)
0cc1: a7        and  a
0cc2: c2 c7 0c  jp   nz,$0CC7		; Timer non-zero
				
0cc5: 36 01     ld   (hl),$01		; Set timer ot 1
				
0cc7: 7e        ld   a,(hl)
0cc8: ee 02     xor  $02
0cca: ca 59 0e  jp   z,$0E59

				;; ($2022) !- $02
0ccd: 21 48 20  ld   hl,$2048
0cd0: 7e        ld   a,(hl)
0cd1: a7        and  a
0cd2: fa ee 0c  jp   m,$0CEE
0cd5: 36 f8     ld   (hl),$F8
0cd7: 2a 32 20  ld   hl,($2032)
0cda: 23        inc  hl
0cdb: 22 32 20  ld   ($2032),hl

				;; Increment score
0cde: 21 3e 20  ld   hl,$203E						; Score 
0ce1: 7e        ld   a,(hl)
0ce2: c6 01     add  a,$01
0ce4: 27        daa
0ce5: 77        ld   (hl),a
0ce6: d2 eb 0c  jp   nc,$0CEB		 
0ce9: 2b        dec  hl									; Handle 3rd digit?! 
0cea: 34        inc  (hl)
				
0ceb: cd df 0f  call $0FDF			; Update score
0cee: cd 77 0d  call $0D77
0cf1: 3a 37 20  ld   a,($2037)
0cf4: cd 87 08  call $0887							; Complement a if positive
0cf7: 0f        rrca
0cf8: 0f        rrca
0cf9: 0f        rrca
0cfa: 0f        rrca
0cfb: e6 03     and  $03
0cfd: c6 10     add  a,$10
0cff: cd 48 0f  call $0F48
				
0d02: 3a 45 20  ld   a,($2045)
0d05: 47        ld   b,a
0d06: e6 0f     and  $0F
0d08: 57        ld   d,a
0d09: 07        rlca
0d0a: 4f        ld   c,a
0d0b: 07        rlca
0d0c: 81        add  a,c
0d0d: 4f        ld   c,a
0d0e: 78        ld   a,b
0d0f: e6 10     and  $10
0d11: 3a 3e 21  ld   a,($213E)
0d14: ca 39 0d  jp   z,$0D39
0d17: fe 28     cp   $28
0d19: d2 27 0d  jp   nc,$0D27
				
0d1c: f7        rst  $30
0d1d: 65																; Argument for rst $30
0d1e: 0e 00     ld   c,$00
0d20: 3e 20     ld   a,$20
0d22: d3 02     out  ($02),a						; Sound Port 1
0d24: c3 4f 0d  jp   $0D4F
0d27: 79        ld   a,c
0d28: 07        rlca
0d29: 4f        ld   c,a
0d2a: 7a        ld   a,d
0d2b: f6 10     or   $10
0d2d: d3 02     out  ($02),a		; Sound Port 1
0d2f: 3e 01     ld   a,$01
0d31: 32 5a 20  ld   ($205A),a
0d34: f7        rst  $30
0d35: 60																; Argument for rst $30
				
0d36: c3 4f 0d  jp   $0D4F
0d39: fe 28     cp   $28
0d3b: da 43 0d  jp   c,$0D43
0d3e: f7        rst  $30
0d3f: 66																; Argument for rst $30
				
0d40: c3 45 0d  jp   $0D45
0d43: f7        rst  $30
0d44: 60																; Argument for rst $30
				
0d45: 7a        ld   a,d
0d46: f6 20     or   $20
0d48: d3 02     out  ($02),a						; Sound Port 1
0d4a: 3e 02     ld   a,$02
0d4c: 32 5a 20  ld   ($205A),a
0d4f: 79        ld   a,c
0d50: 32 3f 21  ld   ($213F),a
0d53: 3a 46 20  ld   a,($2046)
0d56: cd 60 0d  call $0D60
0d59: 2f        cpl
0d5a: 32 3a 20  ld   ($203A),a
0d5d: c3 95 0c  jp   $0C95
0d60: 3a 46 20  ld   a,($2046)
0d63: 2f        cpl
0d64: c6 81     add  a,$81
0d66: fe 81     cp   $81
0d68: da 71 0d  jp   c,$0D71
0d6b: fe c0     cp   $C0
0d6d: d0        ret  nc
0d6e: 3e c0     ld   a,$C0
0d70: c9        ret
0d71: fe 40     cp   $40
0d73: d8        ret  c
0d74: 3e 3f     ld   a,$3F
0d76: c9        ret
0d77: 3a 3e 21  ld   a,($213E)
0d7a: 47        ld   b,a
0d7b: 0f        rrca
0d7c: 0f        rrca
0d7d: 0f        rrca
0d7e: e6 1f     and  $1F
0d80: 2f        cpl
0d81: 3c        inc  a
0d82: 80        add  a,b
0d83: 21 42 21  ld   hl,$2142
0d86: be        cp   (hl)
0d87: c8        ret  z
0d88: da 8f 0d  jp   c,$0D8F
0d8b: 34        inc  (hl)
0d8c: c3 90 0d  jp   $0D90
0d8f: 35        dec  (hl)
0d90: 7e        ld   a,(hl)
0d91: 0f        rrca
0d92: 0f        rrca
0d93: 0f        rrca
0d94: e6 1f     and  $1F
0d96: c6 a5     add  a,$A5
0d98: 5f        ld   e,a
0d99: 16 39     ld   d,$39
0d9b: 7e        ld   a,(hl)
0d9c: e6 07     and  $07
0d9e: 4f        ld   c,a
0d9f: 06 00     ld   b,$00
0da1: 21 95 0a  ld   hl,$0A95
0da4: 09        add  hl,bc
0da5: 7e        ld   a,(hl)
0da6: 2f        cpl
0da7: eb        ex   de,hl
0da8: 0e 1f     ld   c,$1F
0daa: 11 ff 04  ld   de,$04FF
0dad: 77        ld   (hl),a
0dae: 23        inc  hl
0daf: 73        ld   (hl),e
0db0: 09        add  hl,bc
0db1: 15        dec  d
0db2: c2 ad 0d  jp   nz,$0DAD
0db5: c9        ret
				
0db6: 31 00 24  ld   sp,$2400
0db9: 3e 04     ld   a,$04
0dbb: 32 22 20  ld   ($2022),a	; Game state
0dbe: cd 4b 0e  call $0E4B
0dc1: 32 23 20  ld   ($2023),a
0dc4: cd f1 0f  call $0FF1			; Update time
0dc7: cd 44 0f  call $0F44
0dca: 09												; DATA Data for $0F44
0dcb: 2a 2b 20  ld   hl,($202B)		; High score
0dce: eb        ex   de,hl
0dcf: 2a 3d 20  ld   hl,($203D)	; Player score
0dd2: 7d        ld   a,l
0dd3: bb        cp   e
0dd4: da ef 0d  jp   c,$0DEF
0dd7: c2 df 0d  jp   nz,$0DDF
0dda: 7a        ld   a,d
0ddb: bc        cp   h
0ddc: d2 ef 0d  jp   nc,$0DEF
0ddf: 22 2b 20  ld   ($202B),hl		; High score
0de2: cd 57 00  call $0057			; White out bottom 40 rows
0de5: cd 5a 0f  call $0F5A
0de8: 6f												; DATA Data for $0F5A -- Loc 3, String F
0de9: cd 5a 0f  call $0F5A
0dec: 84												; DATA Data for $0F5A	-- Loc 4, String 4
0ded: ef        rst  $28				; (Call $0F16)
0dee: ff												; DATA Data for $0F16
0def: cd 57 00  call $0057			; White out bottom 40 rows
0df2: cd 5a 0f  call $0F5A
0df5: 62												; DATA Data for $0F5A -- Loc 3, String 2
0df6: 3a 34 20  ld   a,($2034)
0df9: 4f        ld   c,a
0dfa: 06 ff     ld   b,$FF
0dfc: 58        ld   e,b
0dfd: 2a 32 20  ld   hl,($2032)
0e00: 7c        ld   a,h
0e01: a7        and  a
0e02: fa 0a 0e  jp   m,$0E0A
0e05: 09        add  hl,bc
0e06: 1c        inc  e
0e07: c3 00 0e  jp   $0E00			; Loop back
				
0e0a: 3a 35 20  ld   a,($2035)
0e0d: a7        and  a
0e0e: 7b        ld   a,e
0e0f: c2 13 0e  jp   nz,$0E13
0e12: 3c        inc  a
0e13: c6 94     add  a,$94			; Loc 4, String $14+a (rating)
0e15: cd 5e 0f  call $0F5E			; String @ loc from a
0e18: ef        rst  $28				; (Call $0F16)
0e19: ff												; DATA Data for $0F16
0e1a: ef        rst  $28				; (Call $0F16)
0e1b: ff												; DATA Data for $0F16
0e1c: cd b3 0e  call $0EB3
0e1f: 3e 0a     ld   a,$0A
0e21: 32 31 20  ld   ($2031),a
0e24: cd 4b 0e  call $0E4B
0e27: 3a 30 20  ld   a,($2030)
0e2a: a7        and  a
0e2b: ca 35 0e  jp   z,$0E35
0e2e: cd 44 0f  call $0F44
0e31: 08												; DATA Data for $0F44
0e32: c3 39 0e  jp   $0E39
0e35: cd 44 0f  call $0F44
0e38: 07												; DATA Data for $0F44
0e39: ef        rst  $28				; (Call $0F16)
0e3a: ff												; DATA Data for $0F16
0e3b: cd 44 0f  call $0F44
0e3e: 0e												; DATA Data for $0F44
0e3f: ef        rst  $28				; (Call $0F16)
0e40: ff												; DATA Data for $0F16
0e41: 21 31 20  ld   hl,$2031
0e44: 35        dec  (hl)
0e45: c2 24 0e  jp   nz,$0E24
0e48: c3 1c 0e  jp   $0E1C

				
0e4b: cd 33 0f  call $0F33
0e4e: 02 00											; DATA Data for $0F33
0e50: 3e 02     ld   a,$02
0e52: 32 2d 20  ld   ($202D),a	; Audio port 2 default
0e55: af        xor  a
0e56: d3 02     out  ($02),a		; Sound Port 1
0e58: c9        ret

				;; ($2022) == $02
0e59: 31 00 24  ld   sp,$2400
0e5c: cd 33 0f  call $0F33
0e5f: 03 3c											; DATA Data for $0F33
0e61: cd c4 03  call $03C4			; Draw crash message
0e64: 21 35 20  ld   hl,$2035
0e67: 34        inc  (hl)
0e68: cd 28 0f  call $0F28
0e6b: af        xor  a
0e6c: d3 02     out  ($02),a		; Sound Port 1
0e6e: cd 33 0f  call $0F33
0e71: 02 0a											; DATA Data for $0F33
0e73: cd 28 0f  call $0F28
0e76: cd 33 0f  call $0F33
0e79: 0a 50											; DATA Data for $0F33
0e7b: cd 28 0f  call $0F28
0e7e: cd 98 0e  call $0E98
0e81: 3a 23 20  ld   a,($2023)
0e84: fe 01     cp   $01
0e86: 3e ff     ld   a,$FF
0e88: ca 8d 0e  jp   z,$0E8D
0e8b: 3e 78     ld   a,$78
0e8d: 32 40 20  ld   ($2040),a
0e90: 3e 05     ld   a,$05
0e92: 32 22 20  ld   ($2022),a	; Game state
0e95: c3 95 0c  jp   $0C95
0e98: cd de 0e  call $0EDE
0e9b: cd 5a 0f  call $0F5A
0e9e: 4b												; DATA Data for $0F5A -- Loc 2, String 0B
0e9f: cd f1 0f  call $0FF1			; Update time
0ea2: cd df 0f  call $0FDF			; Update score
0ea5: 3e 01     ld   a,$01
0ea7: 32 22 20  ld   ($2022),a	; Game state
0eaa: 3a 23 20  ld   a,($2023)
0ead: ee 03     xor  $03
0eaf: c0        ret  nz
0eb0: f7        rst  $30
0eb1: 81																; Argument for rst $30 
0eb2: c9        ret
				
0eb3: cd de 0e  call $0EDE
0eb6: cd 5a 0f  call $0F5A
0eb9: 43												; DATA Data for $0F5A -- Loc 2, String 03
0eba: f7        rst  $30
0ebb: 6c																; Argument for rst $30 
0ebc: f7        rst  $30
0ebd: 8d																; Argument for rst $30 
0ebe: cd df 0f  call $0FDF			; Update score
0ec1: 21 2b 20  ld   hl,$202B		; High score
0ec4: 11 b9 3c  ld   de,$3CB9		; Screen loc
0ec7: cd e5 0f  call $0FE5			; Draw high score
0eca: 21 29 20  ld   hl,$2029		; Previous score
0ecd: 11 99 3e  ld   de,$3E99		; Screen loc
0ed0: cd e5 0f  call $0FE5			; Draw previous score
0ed3: 3e 03     ld   a,$03
0ed5: 32 22 20  ld   ($2022),a	; Game state
0ed8: 3e 50     ld   a,$50
0eda: 32 3f 21  ld   ($213F),a
0edd: c9        ret
0ede: af        xor  a
0edf: 32 22 20  ld   ($2022),a	; Game state
0ee2: cd 5f 01  call $015F			; Clear screen 
0ee5: 01 ff 14  ld   bc,$14FF
0ee8: 11 80 3a  ld   de,$3A80
0eeb: cd 65 01  call $0165			; Write c to de b*16 times.
0eee: 21 5a 20  ld   hl,$205A
0ef1: 0e ea     ld   c,$EA
0ef3: af        xor  a
0ef4: 77        ld   (hl),a
0ef5: 23        inc  hl
0ef6: 0d        dec  c
0ef7: c2 f4 0e  jp   nz,$0EF4
0efa: 3e 01     ld   a,$01
0efc: 32 5a 20  ld   ($205A),a
0eff: 21 62 20  ld   hl,$2062
0f02: 22 27 20  ld   ($2027),hl
0f05: 21 d0 20  ld   hl,$20D0
0f08: 22 25 20  ld   ($2025),hl
0f0b: 21 80 00  ld   hl,$0080
0f0e: 22 00 20  ld   ($2000),hl
0f11: cd 5a 0f  call $0F5A
0f14: 2a												; DATA Data for $0F5A -- Loc 1, String 0A
0f15: c9				ret

				;; Get argument from call (rst $28)
0f16: e3        ex   (sp),hl
0f17: 7e        ld   a,(hl)
0f18: 23        inc  hl
0f19: e3        ex   (sp),hl
				
0f1a: 32 3f 20  ld   ($203F),a	; Timer
0f1d: cd 80 0b  call $0B80
0f20: 3a 3f 20  ld   a,($203F)
0f23: a7        and  a
0f24: c2 1d 0f  jp   nz,$0F1D
0f27: c9        ret
				
0f28: cd 80 0b  call $0B80
0f2b: 3a 2e 20  ld   a,($202E)	; Audio port 2 timer
0f2e: a7        and  a
0f2f: c2 28 0f  jp   nz,$0F28		; Loop until timer clear
0f32: c9        ret
		
				;; Get bc from calling address
0f33: e3        ex   (sp),hl
0f34: 4e        ld   c,(hl)
0f35: 23        inc  hl
0f36: 46        ld   b,(hl)
0f37: 23        inc  hl
0f38: e3        ex   (sp),hl
				
0f39: 21 2e 20  ld   hl,$202E		; Audio port 2 timer
0f3c: 7e        ld   a,(hl)
0f3d: a7        and  a
0f3e: c0        ret  nz					; Skip if active
				
0f3f: 70        ld   (hl),b			; Set timer
0f40: 79        ld   a,c
0f41: d3 05     out  ($05),a		; Audio Port 2
0f43: c9        ret

				;; Get single argument from stack 
0f44: e3        ex   (sp),hl
0f45: 7e        ld   a,(hl)
0f46: 23        inc  hl
0f47: e3        ex   (sp),hl
				
0f48: cd 91 0f  call $0F91
0f4b: 77        ld   (hl),a
0f4c: f5        push af
0f4d: 01 00 0a  ld   bc,$0A00
0f50: 11 40 25  ld   de,$2540
0f53: cd 65 01  call $0165			; Write c to de b*16 times.
0f56: f1        pop  af
0f57: c3 5e 0f  jp   $0F5E			; String @ loc from a
				;; And return
				

				;; String @ loc from calling 
				;; Get argument from calling address
0f5a: e3        ex   (sp),hl
0f5b: 7e        ld   a,(hl)
0f5c: 23        inc  hl
0f5d: e3        ex   (sp),hl

				;; String @ Loc from a
0f5e: e5        push hl					; Stash hl
0f5f: 07        rlca
0f60: f5        push af					; Stash a<<1
0f61: 07        rlca
0f62: 07        rlca
0f63: 07        rlca
0f64: e6 0e     and  $0E				; Previous bits <7:5>
0f66: 4f        ld   c,a
0f67: 06 00     ld   b,$00
0f69: 21 c5 0f  ld   hl,$0FC5		; Location table
0f6c: 09        add  hl,bc

				;; Get de from table
0f6d: 5e        ld   e,(hl)
0f6e: 23        inc  hl
0f6f: 56        ld   d,(hl)
				
0f70: f1        pop  af					; original a<<1
0f71: e6 3e     and  $3E				; Original bits <4:0>
0f73: ca 8f 0f  jp   z,$0F8F		; No phrase
				
0f76: d5        push de
0f77: 4f        ld   c,a				; a = phrase index
0f78: 21 3f 12  ld   hl,$123F		; Language table 
0f7b: cd 00 10  call $1000			; Index into language table
0f7e: eb        ex   de,hl			; Phrase list to hl
0f7f: 09        add  hl,bc
0f80: 5e        ld   e,(hl)
0f81: 23        inc  hl
0f82: 56        ld   d,(hl)
0f83: eb        ex   de,hl			; hl = start of phrase
0f84: d1        pop  de
0f85: 7e        ld   a,(hl)			; Get char
0f86: cd 81 03  call $0381			; Draw char from a
0f89: 7e        ld   a,(hl)			; Get char
0f8a: 23        inc  hl
0f8b: a7        and  a
0f8c: f2 85 0f  jp   p,$0F85		; Loop (last char has D7 set)
0f8f: e1        pop  hl					; Restore hl
0f90: c9        ret
		
				;; Called from rst $30 and elsewhere
				;; Dump calling address if a matches spot in table
0f91: c5        push bc
0f92: f5        push af
0f93: 07        rlca
0f94: 07        rlca
0f95: 07        rlca
0f96: e6 07     and  $07								; Previous high 3 bits 
0f98: 4f        ld   c,a
0f99: 06 00     ld   b,$00
0f9b: 21 5b 20  ld   hl,$205B						; Table 
0f9e: 09        add  hl,bc							; Index into table 
0f9f: f1        pop  af
0fa0: c1        pop  bc
0fa1: be        cp   (hl)								; Compare to table 
0fa2: c0        ret  nz
0fa3: e1        pop  hl									; Throw away last calling address 
0fa4: c9        ret

				;; Crash string table
0fa5: 50 4f 57 3f								; DATA POW_
0fa9: 5a 41 50 3f								; DATA ZAP_
0fad: 57 41 4d 3f								; DATA WAM_
0fb1: 42 41 4d 3f								; DATA BAM_
0fb5: 5a 4f 52 4b								; DATA ZORK
0fb9: 42 41 4e 47								; DATA BANG
0fbd: 42 4f 4f 4d								; DATA BOOM
0fc1: 5a 4f 4e 4b								; DATA ZONK
		
				;; 2-byte table (8 entries, 5 used)
				;; Screen location for phrases?
0fc5: 00 24											; DATA 
0fc7: 40 38											; DATA 
0fc9: c0 3a											; DATA 
0fcb: a0 3c											; DATA 
0fcd: 80 3e											; DATA 

				;; 2-byte tabke (4 entries) == Coinage
0fcf: 01 01											; DATA 1 coin, 1 credit
0fd1: 01 02											; DATA 1 coin, 2 credit
0fd3: 02 01											; DATA 2 coin, 1 credit
0fd4: 02 03											; DATA 2 coin, 3 credit

				;; 2-byte tabke (4 entries)	== Game time
0fd7: 80 40											; DATA 80 + 40 ext
0fd9: 01 01											; DATA Test mode
0fdb: 99 50											; DATA 99 + 50 ext
0fdd: 60 30											; DATA 60 + 30 ext
				
				;; Update score
0fdf: 21 3d 20  ld   hl,$203d		; Memory location 
0fe2: 11 d9 3a  ld   de,$3ad9		; Screen location

				;; Draw ##.## from hl to de
0fe5: cd 66 03  call $0366			; Draw BCD from hl at de w/ _
0fe8: 3e 3e     ld   a,$3E			; . 
0fea: cd 81 03  call $0381			; Draw char from A 
0fed: 23        inc  hl
0fee: c3 74 03  jp   $0374			; Draw BCD from hl at de w/ 0
				;; And return
		
				;; Draw game time
0ff1: 21 47 12  ld   hl,$1247		; Language loc table
0ff4: cd 00 10  call $1000			; Index into language table (to de)
0ff7: 21 42 20  ld   hl,$2042		; (Game time)
0ffa: c3 66 03  jp   $0366							; Draw BCD from hl at de w/ _

0ffd: a7        and  a									; DATA Checksum fix byte 
0ffe: 00        nop
0fff: 00        nop
		
				;; Index into language table
1000: db 02     in   a,($02)		; IN2
1002: 07        rlca						; 65432107
1003: 07        rlca						; 54321076
1004: 07        rlca						; 43210765
1005: e6 06     and  $06				; Language
1007: 5f        ld   e,a
1008: 16 00     ld   d,$00
100a: 19        add  hl,de
100b: 5e        ld   e,(hl)
100c: 23        inc  hl
100d: 56        ld   d,(hl)
100e: c9        ret
				
100f: 3a 4a 20  ld   a,($204A)
1012: a7        and  a
1013: f8        ret  m
1014: 21 36 20  ld   hl,$2036
1017: 46        ld   b,(hl)
1018: 7e        ld   a,(hl)
1019: 23        inc  hl					; $2037
101a: be        cp   (hl)
101b: ca 37 10  jp   z,$1037		; Jump if zero
101e: ae        xor  (hl)				; a = ($2036) ^ ($2037)
101f: 78        ld   a,b				; a = ($2036)
1020: fa 2b 10  jp   m,$102B		; D7 different
1023: be        cp   (hl)
1024: d2 2f 10  jp   nc,$102F
				
1027: 35        dec  (hl)
1028: c3 30 10  jp   $1030
				
102b: be        cp   (hl)
102c: d2 27 10  jp   nc,$1027
				
102f: 34        inc  (hl)
				
1030: 3a 39 20  ld   a,($2039)
1033: 32 4a 20  ld   ($204A),a
1036: c9        ret

								
1037: 23        inc  hl
1038: 7e        ld   a,(hl)
1039: a7        and  a
103a: c2 27 10  jp   nz,$1027
				
103d: 47        ld   b,a
103e: 3a 23 20  ld   a,($2023)
1041: 4f        ld   c,a
1042: 07        rlca
1043: 81        add  a,c
1044: 4f        ld   c,a
1045: 21 7c 10  ld   hl,$107C
1048: 09        add  hl,bc
1049: 11 36 20  ld   de,$2036
104c: cd 88 10  call $1088			; Kick PRNG, get #
104f: e6 07     and  $07
1051: ca 6f 10  jp   z,$106F
1054: cd 88 10  call $1088			; Kick PRNG, get #
1057: e6 7f     and  $7F
1059: d6 40     sub  $40
105b: 12        ld   (de),a
105c: 13        inc  de
105d: 13        inc  de
105e: cd 88 10  call $1088			; Kick PRNG, get #
1061: a6        and  (hl)
1062: 12        ld   (de),a
1063: 13        inc  de
1064: 23        inc  hl
1065: cd 88 10  call $1088			; Kick PRNG, get #
1068: a6        and  (hl)
1069: 23        inc  hl
106a: 86        add  a,(hl)
106b: c6 fc     add  a,$FC
106d: 12        ld   (de),a
106e: c9        ret
106f: 12        ld   (de),a
1070: 13        inc  de
1071: 13        inc  de
1072: cd 88 10  call $1088			; Kick PRNG, get #
1075: e6 3f     and  $3F
1077: c6 20     add  a,$20
1079: c3 62 10  jp   $1062
107c: 03        inc  bc
107d: 03        inc  bc
107e: 00        nop
107f: 03        inc  bc
1080: 03        inc  bc
1081: 00        nop
1082: 03        inc  bc
1083: 01 02 03  ld   bc,$0302
1086: 00        nop
1087: 03        inc  bc

				;; Crappy PRNG?
1088: e5        push hl
1089: c5        push bc
108a: 21 09 20  ld   hl,$2009
108d: 06 08     ld   b,$08			; Loop counter
108f: 7e        ld   a,(hl)
1090: 07        rlca
1091: 07        rlca
1092: 07        rlca
1093: ae        xor  (hl)
1094: 17        rla
1095: 17        rla
1096: 21 09 20  ld   hl,$2009
1099: 7e        ld   a,(hl)
109a: 17        rla
109b: 77        ld   (hl),a
109c: 23        inc  hl					; hl=$2010
109d: 7e        ld   a,(hl)
109e: 17        rla
109f: 77        ld   (hl),a
10a0: 23        inc  hl					; hl=$2011
10a1: 7e        ld   a,(hl)
10a2: 17        rla
10a3: 77        ld   (hl),a
10a4: 23        inc  hl					; hl=$2012
10a5: 7e        ld   a,(hl)
10a6: 17        rla
10a7: 77        ld   (hl),a
10a8: 05        dec  b
10a9: c2 90 10  jp   nz,$1090		; Loop
				
10ac: c1        pop  bc
10ad: e1        pop  hl
10ae: c9        ret
				
				
10af: 21 44 21  ld   hl,$2144
10b2: 36 35     ld   (hl),$35
10b4: 11 e7 10  ld   de,$10E7
10b7: 01 40 00  ld   bc,$0040		; b = xor value, c=count
10ba: cd c9 10  call $10C9
10bd: 23        inc  hl
10be: eb        ex   de,hl
10bf: 06 08     ld   b,$08
10c1: cd df 0a  call $0ADF			; Copy (hl) to (de) b times
10c4: eb        ex   de,hl
10c5: 2b        dec  hl
10c6: 01 3e ff  ld   bc,$FF3E		; b = xor value, c=count

				;; de = table
				;; b  = xor value
				;; c  = loop counter
10c9: 1a        ld   a,(de)
10ca: d5        push de
10cb: 16 04     ld   d,$04
10cd: 07        rlca
10ce: 07        rlca
10cf: 5f        ld   e,a
10d0: e6 03     and  $03
10d2: a8        xor  b
10d3: f2 d7 10  jp   p,$10D7
				
10d6: 3c        inc  a
10d7: 86        add  a,(hl)
10d8: 23        inc  hl
10d9: 77        ld   (hl),a
10da: 15        dec  d
10db: 7b        ld   a,e
10dc: c2 cd 10  jp   nz,$10CD
				
10df: d1        pop  de
10e0: 13        inc  de
10e1: 0d        dec  c
10e2: c2 c9 10  jp   nz,$10C9
10e5: c9        ret
				
10e6: d5        push de					; DATA Garbage byte?

				;; $40 long table?
10e7: 25 55 55 15 15 15 04 51		; DATA ??
10ef: 11 11 04 44 11 04 10 41		; DATA ??
10f7: 04 10 41 01 01 04 04 04		; DATA ??
10ff: 04 04 01 01 00 40 10 04		; DATA ??
1107: 01 00 40 10 01 00 10 04		; DATA ??
110f: 00 40 04 00 10 01 00 10		; DATA ??
1117: 00 40 01 00 10 00 40 01		; DATA ??
111f: 00 01 00 04 00 10 00 40		; DATA ??

				;; $08 long table
1127: 7f 79 74 70 6b 67 64 60		; DATA ??
				
				;; $3E long table?
112f: fe ee a6 99 65 55 55 54		; DATA ??
1137: 51 45 11 11 11 04 41 04		; DATA ??
113f: 10 40 41 00 40 40 10 04		; DATA ??
1147: 00 40 04 00 10 00 10 00		; DATA ??
114f: 10 00 01 00 00 04 00 00		; DATA ??
1157: 04 00 00 00 40 00 00 00		; DATA ??
115f: 10 00 00 00 00 40 00 00		; DATA ??
1167: 00 00 01 00 00 00					; DATA ??

				;; Table for $0862
116d: 81 8f a2 ad b5 bb c0 c4		; DATA 
1175: c8 cb ce d0 d3 d5 d7 d9		; DATA 
117d: db dc de df e1 e2 e3 e4		; DATA 
1185: e6 e7 e8 e9 ea eb ec ed		; DATA 
118d: ed ee ef f0 f1 f1 f2 f3		; DATA 
1195: f4 f4 f5 f6 f6 f7 f7 f8		; DATA 
119d: f9 f9 fa fa fb fb fc fc		; DATA 
11a5: fd fd fe fe ff ff ff ff		; DATA 
11ad:	ff												; DATA 

				;; Table
11ae: 01 01 01 01 01 01 01 01		; DATA 11x 01
11b6: 01 01 01 02 02 02 02 02		; DATA 15x 02
11be: 02 02 02 02 02 02 02 02		; DATA 15x 02
11c6: 02 02	03 03 03 03 03 03		; DATA 9x  03
11ce: 03 03	03 04 04 04 04 04		; DATA 7x  04
11d6: 04 04 05 05 05 05 05 06		; DATA 5x  05, 5x  06
11de: 06 06 06 06 07 07 07 07		; DATA 4x  07
11e6: 08 08 08 09 09 09 0a 0a		; DATA 3x  08, 3x  09, 3x  0a
11ee: 0a 0b 0b 0c 0c 0c 0d 0d		; DATA 2x  0b, 3x  0c, 2x  0d
11f6: 0e 0e 0f 10 10 11 11 12		; DATA 2x  0e
11fe: 13 13 14 15 16 16 17 18		; DATA 
1206: 19 1a 1b 1c 1d 1e 1f 20		; DATA 
120e: 21 23 24 25 27 28 2a 2b		; DATA 
1216: 2d 2f 30 32 34 36 38 3a		; DATA 
121e: 3c 3e 41 43 46 48 4b 4e		; DATA 
1226: 51 54 57 5a 5c 61 64 68		; DATA 

				;; Table for $0869
122e: 00 01 13 1e 26 2c 31 33		; DATA 
1236: 35 39 3b 3d 3f 41 42 43		; DATA 
123e: 44												; DATA 
		
				;; Language table
123f: 4d 12											; DATA $124D = $124F - 2 (English)
1241: f0 13											; DATA $13F0 = $13F2 - 2 (German)
1243: 51 15											; DATA $!551 = $1553 - 2 (French)
1245: b3 16											; DATA $16b3 = $16b5 - 2 (Spanish)

				;; Language table 2
				;; Screen location for Timer
1247: c8 3a											; DATA $3ac8 
1249: c8 3a											; DATA $3ac8
124b: c9 3a											; DATA $3ac9
124c: ca 3a											; DATA $3aca

				;; English String table
124f: b8 12											; DATA 01 = Extended
1251: db 13											; DATA 02 = Your rating
1253: 3c 13											; DATA 03 = Score
1255: 81 13											; DATA 04 = New record
1257: c6 12											; DATA 05 = Shift low
1259: e0 12											; DATA 06 = Shift high
125b: fd 12											; DATA 07 = Insert coin
125d: 09 13											; DATA 08 = Push button (should be 1307)
125f: 15 13											; DATA 09 = Game over
1261: 1f 13											; DATA 0A = Speedometer
1263: 35 13											; DATA 0B = Time
1265: 43 13											; DATA 0C = High score
1267: 4f 13											; DATA 0D = Prev score
1269: 5f 13											; DATA 0E = Datsun
126b: 70 13											; DATA 0F = Congrats
126d: 93 12											; DATA 10 = Max curve (should be 1294)
126f: 81 12											; DATA 11 = Max curve 160
1271: 94 12											; DATA 12 = Max curve 120
1273: a6 12											; DATA 13 = Max curve 80
1275: 9c 13											; DATA 14 = 1 Road hog
1277: a7 13											; DATA 15 = 2 Fender bender
1279: b7 13											; DATA 16 = 3 Hot wheels                 
127b: c4 13											; DATA 17 = 4 Pro racer
127d: d0 13											; DATA 18 = 5 Champ
127f: d0 13											; DATA 19 = 5 Champ
				
				;; Text 
1281: 07												; DATA ??
1282: 4d 41 58 40 43 55 52 56		; DATA MAX_CURV
128a: 45 40 31 36 30 40 4d 50		; DATA E_160_MP
1292: 48 c0											; DATA H_
				
1294: 07
1295: 4d 41 58 40 43 55 52 56		; DATA MAX_CURV
129d: 45 40 31 32 30 40 4d 50		; DATA E_120_MP
12a5: c8												; DATA H
				
12a6: 07
12a7: 4d 41 58 40 43 55 52 56		; DATA MAX_CURV
12af: 45 40 31 36 30 40 4d 50		; DATA E__80_MP
12b7: c8												; DATA H
				
12b8: 0a
12b9: 45 58 54 45 4e 44 45 44		; DATA EXTENDED
12c1: 40 54 49 4d c5						; DATA _TIME
				
12c6: 04
12c7: 53 48 49 46 54 40 47 45		; DATA SHIFT_GE
12cf: 41 52 40 49 4e 54 4f 40		; DATA AR_INTO_
12d7: 4c 4f 57 40 53 50 45 45		; DATA LOW_SPEE
12df: c4												; DATA D

12e0: 02
12e1: 53 48 49 46 54 40 54 4f		; DATA SHIFT_TO
12e9: 40 48 49 47 48 40 46 4f		; DATA _HIGH_FO
12f1: 52 40 4d 41 58 40 53 43		; DATA R_MAX_SC
12f9: 4f 52 45 bf								; DATA ORE!
				
12fd: 0a
12fe: 49 4e 53 45 52 54 40 43		; DATA INSERT_C
1306: 4f 49 ce									; DATA OIN
				
1307: 0a 
130a: 50 55 53 48 40 42 55 54		; DATA PUSH_BUT
1312: 54 4f ce									; DATA TON


1315: 0c
1316: 47 41 4d 45 40 4f 56 45   ; DATA GAME_OVE
131e: d2                        ; DATA R

131f: 05
1320: 5b 3b 5c 3b 5d 3b 5e 3b   ; DATA [;\;];^;
1328: 5f 3c 5b 3c 5c 3c 5d 3c   ; DATA _<[<\<]<
1330: 5e 3c 5f 3d db            ; DATA ^<_=[

1335: 02
1336: 54 49 4d 45 3a 09					; DATA TIME: 
				
133c: 03
133d: 53 43 4f 52 45 ba         ; DATA SCORE:

1343: 03
1344: 48 49 47 48 40 53 43 4f   ; DATA HIGH_SCO
134c: 52 45 ba                  ; DATA RE:

134f: 03
1350: 50 52 45 56 49 4f 55 53   ; DATA PREVIOUS
1358: 40 53 43 4f 52 45 ba      ; DATA _SCORE:

135f: 08
1360: 44 41 54 53 55 4e 40 32   ; DATA DATSUN_2
1368: 38 30 40 5a 5a 5a 41 d0   ; DATA 80_ZZZAP

1370: 08
1371: 43 4f 4e 47 52 41 54 55   ; DATA CONGRATU
1379: 4c 41 54 49 4f 4e 53 bf   ; DATA LATIONS?

1381: 03
1382: 59 4f 55 40 48 41 56 45   ; DATA YOU_HAVE
138a: 40 53 45 54 40 41 40 4e   ; DATA _SET_A_N
1392: 45 57 40 52 45 43 4f 52   ; DATA EW_RECOR
139a: 44 bf                     ; DATA D?

139c: 0a
139d: 31 02 52 4f 41 44 40 48   ; DATA 1ROAD_H
13a5: 4f c7                     ; DATA OG

13a7: 08
13a8: 32 02 46 45 4e 44 45 52   ; DATA 2FENDER
13b0: 40 42 45 4e 44 45 d2      ; DATA _BENDER

13b7: 09
13b8: 33 02 48 4f 54 40 57 48   ; DATA 3HOT_WH
13c0: 45 45 4c d3               ; DATA EELS

13c4: 0a
13c5: 34 02 50 52 4f 40 52 41   ; DATA 4PRO_RA
13cd: 43 45 d2                  ; DATA CER

13d0: 0a
13d1: 35 02 43 48 41 4d 50 49   ; DATA 5CHAMPI
13d9: 4f ce                     ; DATA ON

13db: 06
13dc: 59 4f 55 52 40 52 41 54   ; DATA YOUR_RAT
13e4: 49 4e 47 40 31 40 54 4f   ; DATA ING_1_TO
13ec: 40 35 ba                  ; DATA _5:
				
13ef: 00        nop
13f0: 00        nop
13f1: 00        nop

				;; German Table
13f2: 3c 14											; DATA 01 = Extended
13f4: 40 15											; DATA 02 = Your rating
13f6: a2 14											; DATA 03 = Score
13f8: ec 14											; DATA 04 = New record
13fa: 49 14											; DATA 05 = Shift low
13fc: 5e 14											; DATA 06 = Shift high
13fe: 73 14											; DATA 07 = Insert coin
1400: 82 14											; DATA 08 = Push button (should be 1307)	
1402: 91 14											; DATA 09 = Game over										
1404: 1f 13											; DATA 0A = Speedometer									
1406: 9b 14											; DATA 0B = Time													
1408: aa 14											; DATA 0C = High score										
140a: be 14											; DATA 0D = Prev score										
140c: 5f 13											; DATA 0E = Datsun												
140e: d0 14											; DATA 0F = Congrats											
1410: 93 12											; DATA 10 = Max curve (should be 1294)		
1412: 28 14											; DATA 11 = Max curve 160								
1414: 2f 14											; DATA 12 = Max curve 120								
1416: 36 14											; DATA 13 = Max curve 80									
1418: 05 15											; DATA 14 = 1 Road hog										
141a: 11 15											; DATA 15 = 2 Fender bender							
141c: 1f 15											; DATA 16 = 3 Hot wheels
141e: 2c 15											; DATA 17 = 4 Pro racer
1420: d0 13											; DATA 18 = 5 Champ
1422: d0 13											; DATA 19 = 5 Champ
				
1424: 87        add  a,a				; Checksum byte?
1425: 00        nop
1426: 00        nop
1427: 00        nop

1428: 0c
1429: 31 36 30 40 4b cd         ; DATA 160_KM

142f: 0c
1430: 31 32 30 40 4b cd         ; DATA 120_KM

1436: 0d
1437: 38 30 40 4b cd            ; DATA 80_KM

143c: 0a
143d: 5a 45 49 54 40 50 52 41   ; DATA ZEIT_PRA
1445: 45 4d 49 c5               ; DATA EMIE

1449: 06
144a: 47 41 4e 47 40 41 55 46   ; DATA GANG_AUF
1452: 40 4c 4f 40 53 43 48 41   ; DATA _LO_SCHA
145a: 4c 54 45 ce               ; DATA LTEN

145e: 06
145f: 47 41 4e 47 40 41 55 46   ; DATA GANG_AUF
1467: 40 48 49 40 53 43 48 41   ; DATA _HI_SCHA
146f: 4c 54 45 ce               ; DATA LTEN

1473: 09
1474: 47 45 4c 44 40 45 49 4e   ; DATA GELD_EIN
147c: 57 45 52 46 45 ce         ; DATA WERFEN

1482: 09
1483: 4b 4e 4f 50 46 40 44 52   ; DATA KNOPF_DR
148b: 55 45 43 4b 45 ce         ; DATA UECKEN

1491: 0b
1492: 53 50 49 45 4c 45 4e 44   ; DATA SPIELEND
149a: c5                        ; DATA E

149b: 02
149c: 5a 45 49 54 3a 08					; DATA ZEIT:
				
14a2: 03
14a4: 50 55 4e 4b 54 45 ba      ; DATA PUNKTE:

14aa: 03
14ab: 48 4f 45 43 48 53 54 45   ; DATA HOECHSTE
14b3: 40 50 55 4e 4b 54 5a 41   ; DATA _PUNKTZA
14bb: 48 4c ba                  ; DATA HL:

14be: 03
14bf: 4c 45 54 5a 54 45 40 50   ; DATA LETZTE_P
14c7: 55 4e 4b 54 5a 41 48 4c   ; DATA UNKTZAHL
14cf: ba                        ; DATA :

14d0: 02
14d1: 47 52 41 54 55 4c 49 45   ; DATA GRATULIE
14d9: 52 45 3f 02 53 49 45 40   ; DATA RE?SIE_
14e1: 48 41 42 45 4e 40 45 49   ; DATA HABEN_EI
14e9: 4e 45 ce                  ; DATA NEN

14ec: 04
14ed: 4e 45 56 45 4e 40 52 45   ; DATA NEVEN_RE
14f5: 4b 4f 52 44 40 41 55 46   ; DATA KORD_AUF
14fd: 47 45 53 54 45 4c 4c d4   ; DATA GESTELLT

1505: 0a
1506: 31 02 41 4e 46 41 45 4e   ; DATA 1ANFAEN
150e: 47 45 d2                  ; DATA GER

1511: 09
1512: 32 02 53 50 4f 52 54 46   ; DATA 2SPORTF
151a: 41 48 52 45 d2            ; DATA AHRER

151f: 09
1520: 33 02 52 45 4e 4e 46 41   ; DATA 3RENNFA
1528: 48 52 45 d2               ; DATA HRER

152c: 06
152d: 34 02 47 52 41 4e 44 40   ; DATA 4GRAND_
1535: 50 52 49 58 40 46 41 48   ; DATA PRIX_FAH
153d: 52 45 d2                  ; DATA RER

1540: 07
1541: 52 41 4e 47 46 4f 4c 47   ; DATA RANGFOLG
1549: 45 40 31 40 42 49 53 40   ; DATA E_1_BIS_
1551: 35 ba                     ; DATA 5:

				;; French Table
1553: 97 15											; DATA 01 = Extended													
1555: 1d 16											; DATA 02 = Your rating											
1557: 3c 13											; DATA 03 = Score														
1559: 05 16											; DATA 04 = New record												
155b: ac 15											; DATA 05 = Shift low												
155d: cf 15											; DATA 06 = Shift high												
155f: 8f 16											; DATA 07 = Insert coin											
1561: a3 16											; DATA 08 = Push button (should be 1307)			
1563: c7 15											; DATA 09 = Game over												
1565: 1f 13											; DATA 0A = Speedometer											
1567: 89 15											; DATA 0B = Time															
1569: 6e 16											; DATA 0C = High score												
156b: 7e 16											; DATA 0D = Prev score												
156d: 5f 13											; DATA 0E = Datsun														
156f: e9 15											; DATA 0F = Congrats													
1571: 93 12											; DATA 10 = Max curve (should be 1294)				
1573: 28 14											; DATA 11 = Max curve 160										
1575: 2f 14											; DATA 12 = Max curve 120										
1577: 36 14											; DATA 13 = Max curve 80											
1579: 2e 16											; DATA 14 = 1 Road hog												
157b: 41 16											; DATA 15 = 2 Fender bender									
157d: 49 16											; DATA 16 = 3 Hot wheels											
157f: 56 16											; DATA 17 = 4 Pro racer											
1581: 5f 16											; DATA 18 = 5 Champ													
1583: 5f 16											; DATA 19 = 5 Champ
				
1585: 00        nop
1586: 00        nop
1587: 00        nop
1588: 00        nop

1589: 02
158a: 54 45 4d 50 53 3a 0b 53   ; DATA TEMPS:_S
1592: 43 4f 52 45 ba            ; DATA CORE:

1597: 06
1598: 54 45 4d 50 53 40 53 55   ; DATA TEMPS_SU
15a0: 50 50 4c 45 4d 45 4e 54   ; DATA PPLEMENT
15a8: 41 49 52 c5               ; DATA AIRE

15ac: 03
15ad: 50 41 53 53 45 5a 40 4c   ; DATA PASSEZ_L
15b5: 41 40 50 52 45 4d 49 45   ; DATA A_PREMIE
15bd: 52 45 40 56 49 54 45 53   ; DATA RE_VITES
15c5: 53 c5                     ; DATA SE

15c7: 0c
15c8: 54 45 52 4d 49 4e c5      ; DATA TERMINE

15cf: 03
15d0: 50 41 53 53 45 5a 40 4c   ; DATA PASSEZ_L
15d8: 41 40 53 45 43 4f 4e 44   ; DATA A_SECOND
15e0: 45 40 56 49 54 45 53 53   ; DATA E_VITESS
15e8: c5                        ; DATA E

15e9: 02
15ea: 42 52 41 56 4f 3f 02 56   ; DATA BRAVO?V
15f2: 4f 55 53 40 41 56 45 5a   ; DATA OUS_AVEZ
15fa: 40 52 45 41 4c 49 53 45   ; DATA _REALISE
1602: 40 55 ce                  ; DATA _UN

1605: 04
1606: 4e 4f 55 56 45 41 55 40   ; DATA NOUVEAU_
160e: 52 45 43 4f 52 44 40 44   ; DATA RECORD_D
1616: 45 40 50 49 53 54 c5      ; DATA E_PISTE

161d: 08
161e: 56 4f 54 52 45 40 43 41   ; DATA VOTRE_CA
1626: 54 45 47 4f 52 49 45 ba   ; DATA TEGORIE:

162e: 07
162f: 52 45 50 52 45 4e 45 5a   ; DATA REPRENEZ
1637: 40 55 4e 45 40 4c 45 43   ; DATA _UNE_LEC
163f: 4f ce                     ; DATA ON

1641: 0c
1642: 41 4d 41 54 45 55 d2      ; DATA AMATEUR

1649: 0a
164a: 50 52 4f 46 45 53 53 49   ; DATA PROFESSI
1652: 4f 4e 45 cc               ; DATA ONEL

1656: 0c
1657: 43 48 41 4d 50 49 4f ce   ; DATA CHAMPION

165f: 09
1660: 53 55 50 45 52 40 43 48   ; DATA SUPER_CH
1668: 41 4d 50 49 4f ce         ; DATA AMPION

166e: 03
166f: 53 43 4f 52 45 40 41 40   ; DATA SCORE_A_
1677: 42 41 54 54 52 45 ba      ; DATA BATTRE:

167e: 03
167f: 53 43 4f 52 45 40 50 52   ; DATA SCORE_PR
1687: 45 43 45 44 45 4e 54 ba   ; DATA ECEDENT:

168f: 06
1690: 49 4e 54 52 4f 44 55 49   ; DATA INTRODUI
1698: 53 45 52 40 31 40 46 52   ; DATA SER_1_FR
16a0: 41 4e c3                  ; DATA ANC

16a3: 07
16a4: 50 4f 55 53 53 45 5a 40   ; DATA POUSSEZ_
16ac: 4c 45 40 42 4f 55 54 4f   ; DATA LE_BOUTO
16b4: ce                        ; DATA N


				;; Spanish table
16b5: fc 16											; DATA 01 = Extended													
16b7: 76 17											; DATA 02 = Your rating											
16b9: f4 16											; DATA 03 = Score														
16bb: 5f 17											; DATA 04 = New record												
16bd: 0d 17											; DATA 05 = Shift low												
16bf: 28 17											; DATA 06 = Shift high												
16c1: dc 17											; DATA 07 = Insert coin											
16c3: ec 17											; DATA 08 = Push button (should be 1307)			
16c5: 40 17											; DATA 09 = Game over												
16c7: 1f 13											; DATA 0A = Speedometer											
16c9: eb 16											; DATA 0B = Time															
16cb: ce 17											; DATA 0C = High score												
16cd: be 17											; DATA 0D = Prev score												
16cf: 5f 13											; DATA 0E = Datsun														
16d1: 50 17											; DATA 0F = Congrats													
16d3: 93 12											; DATA 10 = Max curve (should be 1294)				
16d5: 28 14											; DATA 11 = Max curve 160										
16d7: 2f 14											; DATA 12 = Max curve 120										
16d9: 36 14											; DATA 13 = Max curve 80											
16db: 83 17											; DATA 14 = 1 Road hog												
16dd: 97 17											; DATA 15 = 2 Fender bender									
16df: ab 17											; DATA 16 = 3 Hot wheels											
16e1: bd 17											; DATA 17 = 4 Pro racer											
16e3: cd 17											; DATA 18 = 5 Champ													
16e5: cd 17											; DATA 19 = 5 Champ
		
16e7: 00        nop
16e8: 00        nop
16e9: 00        nop
16ea: 00        nop

16eb: 02
16ec: 54 49 45 4d 50 4f 3a 06   ; DATA TIEMPO:_
16f4: 03 50 55 4e 54 45 4f ba   ; DATA _PUNTEO:

16fc: 08
16fd: 54 49 45 4d 50 4f 40 45   ; DATA TIEMPO_E
1705: 58 54 45 4e 44 49 44 cf   ; DATA XTENDIDO

170d: 03
170e: 43 41 4d 42 49 45 4c 4f   ; DATA CAMBIELO
1716: 40 41 40 4d 45 4e 4f 53   ; DATA _A_MENOS
171e: 40 56 45 4c 4f 43 49 44   ; DATA _VELOCID
1726: 41 c4                     ; DATA AD

1728: 04
1729: 43 41 4d 42 49 45 4c 4f   ; DATA CAMBIELO
1731: 40 41 4d 41 53 40 56 45   ; DATA _AMAS_VE
1739: 4c 4f 43 49 44 41 c4      ; DATA LOCIDAD

1740: 08
1741: 4a 55 45 47 4f 40 54 45   ; DATA JUEGO_TE
1749: 52 4d 49 4e 41 44 cf      ; DATA RMINADO

1750: 09
1751: 46 45 4c 49 43 49 54 41   ; DATA FELICITA
1759: 43 49 4f 4e 45 d3         ; DATA CIONES

175f: 05
1760: 48 49 43 49 53 54 45 40   ; DATA HICISTE_
1768: 55 4e 40 4e 55 45 56 4f   ; DATA UN_NUEVO
1770: 40 52 45 43 4f d2         ; DATA _RECOR

1776: 0a
1777: 54 55 40 50 55 4e 54 45   ; DATA TU_PUNTE
177f: 4f 40 45 d3               ; DATA O_ES

1783: 06
1784: 4c 4c 45 56 41 53 40 4c   ; DATA LLEVAS_L
178c: 41 40 44 45 4c 41 4e 54   ; DATA A_DELANT
1794: 45 52 c1                  ; DATA ERA

1797: 07
1798: 56 41 40 45 4e 40 53 45   ; DATA VA_EN_SE
17a0: 47 55 4e 44 4f 40 4c 55   ; DATA GUNDO_LU
17a8: 47 41 d2                  ; DATA GAR

17ab: 07
17ac: 4c 4c 41 4e 54 41 53 40   ; DATA LLANTAS_
17b4: 43 41 4c 49 45 4e 54 45   ; DATA CALIENTE
17bc: d3                        ; DATA S

17bd: 06
17be: 03 53 45 47 55 4e 44 4f   ; DATA SEGUNDO
17c6: 40 50 55 45 53 54 cf      ; DATA _PUESTO

17cd: 06
17ce: 03 50 52 49 4d 45 52 40   ; DATA PRIMER_
17d6: 50 55 45 53 54 cf         ; DATA PUESTO

17dc: 08
17dd: 50 4f 4e 47 41 40 4c 41   ; DATA PONGA_LA
17e5: 40 4d 4f 4e 45 44 c1      ; DATA _MONEDA

17ec: 08
17ed: 41 47 41 43 48 41 40 45   ; DATA AGACHA_E
17f5: 4c 40 42 4f 54 4f ce      ; DATA L_BOTON
				
17fc: ff        rst  $38
17fd: ff        rst  $38
17fe: ff        rst  $38
17ff: ff        rst  $38


				;; Mods for 8 chars
1700:	00 0f f0 ff

